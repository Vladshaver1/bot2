import asyncio
import random
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
import sqlite3
import time
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7762032660:AAEBJ7RHJ06A2lGKAItYa6upseVxw2vkJdc'
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)  # –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('referral_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def create_tables():
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT,
        referral_id INTEGER,
        stars INTEGER DEFAULT 0,
        completed_tasks INTEGER DEFAULT 0,
        referrals_count INTEGER DEFAULT 0,
        last_activity TEXT,
        is_banned INTEGER DEFAULT 0,
        reg_date TEXT
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        task_id INTEGER PRIMARY KEY AUTOINCREMENT,
        description TEXT,
        reward INTEGER,
        is_active INTEGER DEFAULT 1
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_tasks (
        user_id INTEGER,
        task_id INTEGER,
        completed_date TEXT,
        FOREIGN KEY(user_id) REFERENCES users(user_id),
        FOREIGN KEY(task_id) REFERENCES tasks(task_id),
        PRIMARY KEY(user_id, task_id)
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS withdrawals (
        withdrawal_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount INTEGER,
        status TEXT DEFAULT 'pending',
        request_date TEXT,
        process_date TEXT,
        FOREIGN KEY(user_id) REFERENCES users(user_id)
    )''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS admin_settings (
        min_referrals INTEGER DEFAULT 35,
        min_tasks INTEGER DEFAULT 40,
        partner_bonus INTEGER DEFAULT 10,
        steal_percent INTEGER DEFAULT 1,
        steal_unlock_tasks INTEGER DEFAULT 25
    )''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cursor.execute('SELECT COUNT(*) FROM admin_settings')
    if cursor.fetchone()[0] == 0:
        cursor.execute('INSERT INTO admin_settings DEFAULT VALUES')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
    cursor.execute('SELECT COUNT(*) FROM tasks')
    if cursor.fetchone()[0] == 0:
        cursor.execute('''
        INSERT INTO tasks (description, reward, is_active)
        VALUES 
            ('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 5, 1),
            ('–°–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç', 10, 1),
            ('–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 7, 1)
        ''')
    
    conn.commit()

create_tables()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    waiting_for_task_description = State()
    waiting_for_task_reward = State()
    waiting_for_user_search = State()
    waiting_for_stars_change = State()
    waiting_for_mailing_text = State()
    waiting_for_mailing_photo = State()
    waiting_for_mailing_button = State()
    waiting_for_min_referrals = State()
    waiting_for_min_tasks = State()
    waiting_for_partner_bonus = State()
    waiting_for_steal_percent = State()
    waiting_for_steal_unlock_tasks = State()

class WithdrawStates(StatesGroup):
    waiting_for_withdraw_amount = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id == 7919687991  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message(F.text == '/start')
async def cmd_start(message: types.Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        full_name = message.from_user.full_name
        referral_id = None
        
        if len(message.text.split()) > 1:
            try:
                referral_id = int(message.text.split()[1])
            except ValueError:
                pass
        
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            reg_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('''
            INSERT INTO users (user_id, username, full_name, referral_id, reg_date, last_activity)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, username, full_name, referral_id, reg_date, reg_date))
            
            if referral_id:
                cursor.execute('UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id = ?', (referral_id,))
                cursor.execute('SELECT partner_bonus FROM admin_settings LIMIT 1')
                partner_bonus = cursor.fetchone()[0]
                cursor.execute('UPDATE users SET stars = stars + ? WHERE user_id = ?', (partner_bonus, referral_id))
            
            conn.commit()
            
            welcome_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
                "üíé –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π.\n\n"
                "üîπ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã\n"
                "üîπ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n"
                "üîπ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö\n"
                "üîπ –í—ã–≤–æ–¥–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã\n\n"
                "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
            )
            
            buttons = [
                [InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
                    switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤–µ–∑–¥—ã! https://t.me/{(await bot.get_me()).username}?start={user_id}"
                )],
                [
                    InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_list"),
                    InlineKeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
                ]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(welcome_text, reply_markup=keyboard)
        else:
            cursor.execute(
                'UPDATE users SET last_activity = ? WHERE user_id = ?', 
                (datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id)
            conn.commit()
            await show_main_menu(message)
            
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(message: types.Message | types.CallbackQuery):
    buttons = [
        [InlineKeyboardButton(
            text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
            switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤–µ–∑–¥—ã! https://t.me/{(await bot.get_me()).username}?start={message.from_user.id}"
        )],
        [
            InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_list"),
            InlineKeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
        ],
        [
            InlineKeyboardButton(text="üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="mini_games"),
            InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")
        ],
        [InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥", callback_data="withdraw")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if isinstance(message, types.CallbackQuery):
        await message.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –±–∞–ª–∞–Ω—Å"
@dp.callback_query(F.data == 'my_balance')
async def process_my_balance(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        
        cursor.execute(
            'SELECT stars, completed_tasks, referrals_count FROM users WHERE user_id = ?', 
            (user_id,))
        result = cursor.fetchone()
        
        if result:
            stars, completed_tasks, referrals_count = result
            
            cursor.execute('SELECT min_referrals, min_tasks FROM admin_settings LIMIT 1')
            min_referrals, min_tasks = cursor.fetchone()
            
            balance_text = (
                f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {stars} –∑–≤–µ–∑–¥\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}/{min_tasks}\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}/{min_referrals}\n\n"
            )
            
            if completed_tasks >= min_tasks and referrals_count >= min_referrals:
                balance_text += "üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥!"
            else:
                balance_text += (
                    f"‚ö† –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                    f"- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å {min_referrals} –¥—Ä—É–∑–µ–π (–æ—Å—Ç–∞–ª–æ—Å—å {max(0, min_referrals - referrals_count)})\n"
                    f"- –í—ã–ø–æ–ª–Ω–∏—Ç—å {min_tasks} –∑–∞–¥–∞–Ω–∏–π (–æ—Å—Ç–∞–ª–æ—Å—å {max(0, min_tasks - completed_tasks)})\n"
                )
            
            buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback_query.message.edit_text(balance_text, reply_markup=keyboard)
        else:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"Error in process_my_balance: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"
@dp.callback_query(F.data == 'tasks_list')
async def process_tasks_list(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        
        cursor.execute('SELECT task_id, description, reward FROM tasks WHERE is_active = 1')
        tasks = cursor.fetchall()
        
        if tasks:
            tasks_text = "üìù –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n"
            buttons = []
            
            for task in tasks:
                task_id, description, reward = task
                cursor.execute(
                    'SELECT 1 FROM user_tasks WHERE user_id = ? AND task_id = ?', 
                    (user_id, task_id))
                completed = cursor.fetchone() is not None
                
                status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                tasks_text += f"{task_id}. {description}\nüíé –ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–≤–µ–∑–¥ ({status})\n\n"
                
                if not completed:
                    buttons.append([InlineKeyboardButton(
                        text=f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ {task_id}", 
                        callback_data=f"complete_task_{task_id}"
                    )])
            
            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback_query.message.edit_text(tasks_text, reply_markup=keyboard)
        else:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
    except Exception as e:
        logger.error(f"Error in process_tasks_list: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data.startswith('complete_task_'))
async def process_complete_task(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        task_id = int(callback_query.data.split('_')[2])
        
        cursor.execute(
            'SELECT 1 FROM user_tasks WHERE user_id = ? AND task_id = ?', 
            (user_id, task_id))
        if cursor.fetchone():
            await callback_query.answer("–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ")
            return
        
        cursor.execute(
            'SELECT description, reward FROM tasks WHERE task_id = ? AND is_active = 1', 
            (task_id,))
        task = cursor.fetchone()
        
        if task:
            description, reward = task
            
            completed_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('''
            INSERT INTO user_tasks (user_id, task_id, completed_date)
            VALUES (?, ?, ?)
            ''', (user_id, task_id, completed_date))
            
            cursor.execute(
                'UPDATE users SET stars = stars + ?, completed_tasks = completed_tasks + 1 WHERE user_id = ?', 
                (reward, user_id))
            conn.commit()
            
            await callback_query.answer(f"–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {reward} –∑–≤–µ–∑–¥")
            await process_tasks_list(callback_query)
        else:
            await callback_query.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"Error in process_complete_task: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∏–Ω–∏-–∏–≥—Ä—ã"
@dp.callback_query(F.data == 'mini_games')
async def process_mini_games(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        
        cursor.execute('SELECT completed_tasks FROM users WHERE user_id = ?', (user_id,))
        completed_tasks = cursor.fetchone()[0]
        
        cursor.execute('SELECT steal_unlock_tasks FROM admin_settings LIMIT 1')
        steal_unlock_tasks = cursor.fetchone()[0]
        
        buttons = []
        
        if completed_tasks >= steal_unlock_tasks:
            buttons.append([InlineKeyboardButton(text="üé≤ –ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥", callback_data="steal_stars")])
        else:
            buttons.append([InlineKeyboardButton(
                text=f"üé≤ –ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥ (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ {steal_unlock_tasks} –∑–∞–¥–∞–Ω–∏—è—Ö)", 
                callback_data="steal_locked"
            )])
        
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback_query.message.edit_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in process_mini_games: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã "–ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥"
@dp.callback_query(F.data == 'steal_stars')
async def process_steal_stars(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        
        cursor.execute('SELECT stars FROM users WHERE user_id = ?', (user_id,))
        user_stars = cursor.fetchone()[0]
        
        if user_stars < 1:
            await callback_query.answer("–£ –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –∑–≤–µ–∑–¥–∞ –¥–ª—è –∏–≥—Ä—ã")
            return
        
        cursor.execute('SELECT steal_percent FROM admin_settings LIMIT 1')
        steal_percent = cursor.fetchone()[0]
        
        cursor.execute(
            'SELECT user_id, stars FROM users WHERE user_id != ? AND is_banned = 0 AND stars > 0 ORDER BY RANDOM() LIMIT 1', 
            (user_id,))
        victim = cursor.fetchone()
        
        if not victim:
            await callback_query.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∂–µ—Ä—Ç–≤ –¥–ª—è –∫—Ä–∞–∂–∏")
            return
        
        victim_id, victim_stars = victim
        max_steal = max(1, int(victim_stars * steal_percent / 100))
        stolen_stars = random.randint(1, max_steal)
        
        if random.random() < 0.5:
            cursor.execute(
                'UPDATE users SET stars = stars - ? WHERE user_id = ? AND stars >= ?', 
                (stolen_stars, victim_id, stolen_stars))
            cursor.execute(
                'UPDATE users SET stars = stars + ? WHERE user_id = ?', 
                (stolen_stars, user_id))
            conn.commit()
            
            cursor.execute('SELECT username, full_name FROM users WHERE user_id = ?', (victim_id,))
            victim_info = cursor.fetchone()
            victim_name = victim_info[1] if victim_info[1] else (victim_info[0] if victim_info[0] else f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {victim_id}")
            
            result_text = (
                f"üéâ –£—Å–ø–µ—Ö! –í—ã —É–∫—Ä–∞–ª–∏ {stolen_stars} –∑–≤–µ–∑–¥ —É {victim_name}\n\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_stars + stolen_stars} –∑–≤–µ–∑–¥"
            )
            
            try:
                await bot.send_message(victim_id, f"üò± –£ –≤–∞—Å —É–∫—Ä–∞–ª–∏ {stolen_stars} –∑–≤–µ–∑–¥!")
            except:
                pass
        else:
            cursor.execute(
                'UPDATE users SET stars = stars - 1 WHERE user_id = ? AND stars >= 1', 
                (user_id,))
            conn.commit()
            
            result_text = (
                f"üòû –ù–µ—É–¥–∞—á–∞! –í–∞—Å –ø–æ–π–º–∞–ª–∏ –∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ 1 –∑–≤–µ–∑–¥—É\n\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_stars - 1} –∑–≤–µ–∑–¥"
            )
        
        buttons = [
            [InlineKeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="steal_stars")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mini_games")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback_query.message.edit_text(result_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in process_steal_stars: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"
@dp.callback_query(F.data == 'top_players')
async def process_top_players(callback_query: types.CallbackQuery):
    try:
        cursor.execute('''
        SELECT user_id, username, full_name, stars 
        FROM users 
        WHERE is_banned = 0 
        ORDER BY stars DESC 
        LIMIT 10
        ''')
        top_players = cursor.fetchall()
        
        if top_players:
            top_text = "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥:\n\n"
            
            for i, player in enumerate(top_players, 1):
                user_id, username, full_name, stars = player
                name = full_name if full_name else (f"@{username}" if username else f"ID: {user_id}")
                top_text += f"{i}. {name} - {stars} –∑–≤–µ–∑–¥\n"
            
            buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback_query.message.edit_text(top_text, reply_markup=keyboard)
        else:
            await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–∫–∞—Ö")
    except Exception as e:
        logger.error(f"Error in process_top_players: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥"
@dp.callback_query(F.data == 'withdraw')
async def process_withdraw(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback_query.from_user.id
        
        cursor.execute(
            'SELECT stars, completed_tasks, referrals_count FROM users WHERE user_id = ?', 
            (user_id,))
        result = cursor.fetchone()
        
        if result:
            stars, completed_tasks, referrals_count = result
            
            cursor.execute('SELECT min_referrals, min_tasks FROM admin_settings LIMIT 1')
            min_referrals, min_tasks = cursor.fetchone()
            
            if completed_tasks >= min_tasks and referrals_count >= min_referrals:
                if stars > 0:
                    await state.set_state(WithdrawStates.waiting_for_withdraw_amount)
                    await callback_query.message.edit_text(
                        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {stars} –∑–≤–µ–∑–¥\n\n"
                        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ: {stars}):"
                    )
                else:
                    await callback_query.answer("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞")
            else:
                await callback_query.answer(
                    f"–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞:\n"
                    f"- –ù—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å {min_referrals} –¥—Ä—É–∑–µ–π (—É –≤–∞—Å {referrals_count})\n"
                    f"- –í—ã–ø–æ–ª–Ω–∏—Ç—å {min_tasks} –∑–∞–¥–∞–Ω–∏–π (—É –≤–∞—Å {completed_tasks})"
                )
    except Exception as e:
        logger.error(f"Error in process_withdraw: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
@dp.message(WithdrawStates.waiting_for_withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        amount = int(message.text)
        
        cursor.execute('SELECT stars FROM users WHERE user_id = ?', (user_id,))
        user_stars = cursor.fetchone()[0]
        
        if amount <= 0:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        
        if amount > user_stars:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞")
            return
        
        request_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute('''
        INSERT INTO withdrawals (user_id, amount, request_date)
        VALUES (?, ?, ?)
        ''', (user_id, amount, request_date))
        
        cursor.execute(
            'UPDATE users SET stars = stars - ? WHERE user_id = ?', 
            (amount, user_id))
        conn.commit()
        
        await message.answer(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_id = 7919687991  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
        cursor.execute('SELECT username, full_name FROM users WHERE user_id = ?', (user_id,))
        user_info = cursor.fetchone()
        username, full_name = user_info if user_info else (None, None)
        user_name = full_name or username or f"ID: {user_id}"
        
        await bot.send_message(
            admin_id,
            f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
            f"üíé –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
            f"üìÖ –î–∞—Ç–∞: {request_date}"
        )
        
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in process_withdraw_amount: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥")
        await state.clear()

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(F.text == '/admin')
async def cmd_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    buttons = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [
            InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_mailing"),
            InlineKeyboardButton(text="üõ† –ó–∞–¥–∞–Ω–∏—è", callback_data="admin_tasks")
        ],
        [
            InlineKeyboardButton(text="‚öô –õ–∏–º–∏—Ç—ã", callback_data="admin_limits"),
            InlineKeyboardButton(text="‚≠ê –ó–≤–µ–∑–¥—ã", callback_data="admin_stars")
        ],
        [InlineKeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –≤ –∞–¥–º–∏–Ω–∫–µ
@dp.callback_query(F.data == 'admin_stats')
async def process_admin_stats(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE date(last_activity) = date("now")')
        active_today = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM users WHERE date(reg_date) = date("now")')
        new_today = cursor.fetchone()[0]
        
        cursor.execute('SELECT SUM(stars) FROM users')
        total_stars = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT COUNT(*) FROM withdrawals WHERE status = "pending"')
        pending_withdrawals = cursor.fetchone()[0]
        
        stats_text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}\n"
            f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
            f"üíé –í—Å–µ–≥–æ –∑–≤–µ–∑–¥ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_stars}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–≤–æ–¥–æ–≤: {pending_withdrawals}\n"
        )
        
        buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback_query.message.edit_text(stats_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in process_admin_stats: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞–Ω–∏—è" –≤ –∞–¥–º–∏–Ω–∫–µ
@dp.callback_query(F.data == 'admin_tasks')
async def process_admin_tasks(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="remove_task")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_progress")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data == 'add_task')
async def process_add_task(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminStates.waiting_for_task_description)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")

@dp.message(AdminStates.waiting_for_task_description)
async def process_task_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AdminStates.waiting_for_task_reward)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:")

@dp.message(AdminStates.waiting_for_task_reward)
async def process_task_reward(message: types.Message, state: FSMContext):
    try:
        reward = int(message.text)
        if reward <= 0:
            raise ValueError
        
        data = await state.get_data()
        description = data['description']
        
        cursor.execute('''
        INSERT INTO tasks (description, reward)
        VALUES (?, ?)
        ''', (description, reward))
        conn.commit()
        
        await message.answer(
            f"–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–≤–µ–∑–¥"
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in process_task_reward: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data == 'remove_task')
async def process_remove_task(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    cursor.execute('SELECT task_id, description FROM tasks WHERE is_active = 1')
    tasks = cursor.fetchall()
    
    if not tasks:
        await callback_query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    buttons = []
    for task in tasks:
        task_id, description = task
        buttons.append([InlineKeyboardButton(
            text=f"‚ùå {task_id}. {description[:30]}...", 
            callback_data=f"delete_task_{task_id}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tasks")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query(F.data.startswith('delete_task_'))
async def process_delete_task(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    task_id = int(callback_query.data.split('_')[2])
    
    cursor.execute('UPDATE tasks SET is_active = 0 WHERE task_id = ?', (task_id,))
    conn.commit()
    
    await callback_query.answer("–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    await process_admin_tasks(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏–º–∏—Ç—ã" –≤ –∞–¥–º–∏–Ω–∫–µ
@dp.callback_query(F.data == 'admin_limits')
async def process_admin_limits(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    cursor.execute(
        'SELECT min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks FROM admin_settings LIMIT 1'
    )
    settings = cursor.fetchone()
    
    settings_text = (
        f"‚öô –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤:\n\n"
        f"üë• –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞: {settings[0]}\n"
        f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞: {settings[1]}\n"
        f"üéÅ –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞: {settings[2]} –∑–≤–µ–∑–¥\n"
        f"üé≤ –ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥: {settings[3]}%\n"
        f"üîì –ó–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∞–∂–µ: {settings[4]}\n"
    )
    
    buttons = [
        [InlineKeyboardButton(text="‚úè –ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="edit_min_referrals")],
        [InlineKeyboardButton(text="‚úè –ú–∏–Ω–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π", callback_data="edit_min_tasks")],
        [InlineKeyboardButton(text="‚úè –ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–≥–∞", callback_data="edit_partner_bonus")],
        [InlineKeyboardButton(text="‚úè –ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏", callback_data="edit_steal_percent")],
        [InlineKeyboardButton(text="‚úè –ó–∞–¥–∞–Ω–∏–π –¥–ª—è –∫—Ä–∞–∂–∏", callback_data="edit_steal_unlock")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text(settings_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
@dp.callback_query(F.data == 'edit_min_referrals')
async def process_edit_min_referrals(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminStates.waiting_for_min_referrals)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞:")

@dp.message(AdminStates.waiting_for_min_referrals)
async def process_min_referrals_message(message: types.Message, state: FSMContext):
    try:
        min_referrals = int(message.text)
        if min_referrals <= 0:
            raise ValueError
        
        cursor.execute('UPDATE admin_settings SET min_referrals = ?', (min_referrals,))
        conn.commit()
        
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {min_referrals}")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in process_min_referrals_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π
@dp.callback_query(F.data == 'edit_min_tasks')
async def process_edit_min_tasks(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminStates.waiting_for_min_tasks)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞:")

@dp.message(AdminStates.waiting_for_min_tasks)
async def process_min_tasks_message(message: types.Message, state: FSMContext):
    try:
        min_tasks = int(message.text)
        if min_tasks <= 0:
            raise ValueError
        
        cursor.execute('UPDATE admin_settings SET min_tasks = ?', (min_tasks,))
        conn.commit()
        
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {min_tasks}")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in process_min_tasks_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –∑–∞ –¥—Ä—É–≥–∞
@dp.callback_query(F.data == 'edit_partner_bonus')
async def process_edit_partner_bonus(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminStates.waiting_for_partner_bonus)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ (–≤ –∑–≤–µ–∑–¥–∞—Ö):")

@dp.message(AdminStates.waiting_for_partner_bonus)
async def process_partner_bonus_message(message: types.Message, state: FSMContext):
    try:
        partner_bonus = int(message.text)
        if partner_bonus <= 0:
            raise ValueError
        
        cursor.execute('UPDATE admin_settings SET partner_bonus = ?', (partner_bonus,))
        conn.commit()
        
        await message.answer(f"–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {partner_bonus} –∑–≤–µ–∑–¥")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in process_partner_bonus_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫—Ä–∞–∂–∏
@dp.callback_query(F.data == 'edit_steal_percent')
async def process_edit_steal_percent(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminStates.waiting_for_steal_percent)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥ (1-100):")

@dp.message(AdminStates.waiting_for_steal_percent)
async def process_steal_percent_message(message: types.Message, state: FSMContext):
    try:
        steal_percent = int(message.text)
        if steal_percent < 1 or steal_percent > 100:
            raise ValueError
        
        cursor.execute('UPDATE admin_settings SET steal_percent = ?', (steal_percent,))
        conn.commit()
        
        await message.answer(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {steal_percent}%")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
    except Exception as e:
        logger.error(f"Error in process_steal_percent_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∞–∂–µ
@dp.callback_query(F.data == 'edit_steal_unlock')
async def process_edit_steal_unlock(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminStates.waiting_for_steal_unlock_tasks)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∞–∂–µ:")

@dp.message(AdminStates.waiting_for_steal_unlock_tasks)
async def process_steal_unlock_message(message: types.Message, state: FSMContext):
    try:
        steal_unlock = int(message.text)
        if steal_unlock <= 0:
            raise ValueError
        
        cursor.execute('UPDATE admin_settings SET steal_unlock_tasks = ?', (steal_unlock,))
        conn.commit()
        
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∞–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {steal_unlock}")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in process_steal_unlock_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–≤–µ–∑–¥—ã" –≤ –∞–¥–º–∏–Ω–∫–µ
@dp.callback_query(F.data == 'admin_stars')
async def process_admin_stars(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    buttons = [
        [InlineKeyboardButton(text="üéÅ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ –∑–≤–µ–∑–¥", callback_data="mass_give_stars")],
        [InlineKeyboardButton(text="‚ùå –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑—ä—è—Ç–∏–µ –∑–≤–µ–∑–¥", callback_data="mass_take_stars")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥–∞–º–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–∏ –∑–≤–µ–∑–¥
@dp.callback_query(F.data == 'mass_give_stars')
async def process_mass_give_stars(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        cursor.execute('SELECT user_id FROM users WHERE is_banned = 0')
        users = cursor.fetchall()
        
        for user in users:
            stars_to_give = random.randint(1, 3)
            cursor.execute(
                'UPDATE users SET stars = stars + ? WHERE user_id = ?', 
                (stars_to_give, user[0]))
        
        conn.commit()
        
        await callback_query.answer(f"–†–∞–∑–¥–∞–Ω–æ –∑–≤–µ–∑–¥ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        await callback_query.message.edit_text(f"üéâ –£—Å–ø–µ—à–Ω–æ! –†–∞–∑–¥–∞–Ω–æ –∑–≤–µ–∑–¥—ã {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    except Exception as e:
        logger.error(f"Error in process_mass_give_stars: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –∑–≤–µ–∑–¥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ
@dp.callback_query(F.data == 'admin_search_user')
async def process_admin_search_user(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(AdminStates.waiting_for_user_search)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ @username:")

@dp.message(AdminStates.waiting_for_user_search)
async def process_user_search(message: types.Message, state: FSMContext):
    try:
        search_query = message.text.strip()
        
        try:
            user_id = int(search_query)
            cursor.execute('''
            SELECT user_id, username, full_name, stars, completed_tasks, referrals_count, is_banned, reg_date
            FROM users
            WHERE user_id = ?
            ''', (user_id,))
        except ValueError:
            username = search_query.lstrip('@')
            cursor.execute('''
            SELECT user_id, username, full_name, stars, completed_tasks, referrals_count, is_banned, reg_date
            FROM users
            WHERE username = ?
            ''', (username,))
        
        user = cursor.fetchone()
        
        if user:
            user_id, username, full_name, stars, completed_tasks, referrals_count, is_banned, reg_date = user
            
            user_info = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
                f"üÜî ID: {user_id}\n"
                f"üìõ Username: @{username if username else '–Ω–µ—Ç'}\n"
                f"üíé –ó–≤–µ–∑–¥: {stars}\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n"
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
                f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–∞–Ω–µ–Ω' if is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}"
            )
            
            buttons = [
                [
                    InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data=f"add_stars_{user_id}"),
                    InlineKeyboardButton(text="‚ûñ –£–±—Ä–∞—Ç—å –∑–≤–µ–∑–¥—ã", callback_data=f"remove_stars_{user_id}")
                ],
                [
                    InlineKeyboardButton(
                        text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å" if not is_banned else "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", 
                        callback_data=f"toggle_ban_{user_id}"
                    )
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(user_info, reply_markup=keyboard)
            await state.clear()
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        logger.error(f"Error in process_user_search: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query(F.data.startswith(('add_stars_', 'remove_stars_')))
async def process_stars_change(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    action, user_id = callback_query.data.split('_')[0], int(callback_query.data.split('_')[2])
    
    await state.update_data(action=action, user_id=user_id)
    await state.set_state(AdminStates.waiting_for_stars_change)
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:")

@dp.message(AdminStates.waiting_for_stars_change)
async def process_stars_change_message(message: types.Message, state: FSMContext):
    try:
        stars = int(message.text)
        if stars <= 0:
            raise ValueError
        
        data = await state.get_data()
        action = data['action']
        user_id = data['user_id']
        
        cursor.execute('SELECT stars FROM users WHERE user_id = ?', (user_id,))
        current_stars = cursor.fetchone()[0]
        
        if action == 'remove' and stars > current_stars:
            stars = current_stars
        
        if action == 'add':
            cursor.execute(
                'UPDATE users SET stars = stars + ? WHERE user_id = ?', 
                (stars, user_id))
            action_text = f"–¥–æ–±–∞–≤–ª–µ–Ω–æ {stars} –∑–≤–µ–∑–¥"
        else:
            cursor.execute(
                'UPDATE users SET stars = stars - ? WHERE user_id = ?', 
                (stars, user_id))
            action_text = f"—É–±—Ä–∞–Ω–æ {stars} –∑–≤–µ–∑–¥"
        
        conn.commit()
        
        try:
            if action == 'add':
                await bot.send_message(user_id, f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞–º {stars} –∑–≤–µ–∑–¥!")
            else:
                await bot.send_message(user_id, f"üòû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–±—Ä–∞–ª —É –≤–∞—Å {stars} –∑–≤–µ–∑–¥")
        except:
            pass
        
        await message.answer(f"–£—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} {action_text}")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in process_stars_change_message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data.startswith('toggle_ban_'))
async def process_toggle_ban(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    try:
        user_id = int(callback_query.data.split('_')[2])
        
        cursor.execute('SELECT is_banned FROM users WHERE user_id = ?', (user_id,))
        is_banned = cursor.fetchone()[0]
        
        new_status = 0 if is_banned else 1
        cursor.execute(
            'UPDATE users SET is_banned = ? WHERE user_id = ?', 
            (new_status, user_id))
        conn.commit()
        
        try:
            if new_status:
                await bot.send_message(user_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            else:
                await bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        except:
            pass
        
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'–∑–∞–±–∞–Ω–µ–Ω' if new_status else '—Ä–∞–∑–±–∞–Ω–µ–Ω'}")
        await callback_query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'–∑–∞–±–∞–Ω–µ–Ω' if new_status else '—Ä–∞–∑–±–∞–Ω–µ–Ω'}")
    except Exception as e:
        logger.error(f"Error in process_toggle_ban: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω–∫–µ
@dp.callback_query(F.data == 'admin_back')
async def process_admin_back(callback_query: types.CallbackQuery):
    await cmd_admin(callback_query.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é
@dp.callback_query(F.data == 'main_menu')
async def process_main_menu_back(callback_query: types.CallbackQuery):
    await show_main_menu(callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_command(message: types.Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

[{
	"resource": "/c:/Users/Admin/Desktop/REFBOT/bot.py",
	"owner": "python",
	"severity": 8,
	"message": "Try statement must have at least one except or finally clause",
	"source": "Pylance",
	"startLineNumber": 135,
	"startColumn": 5,
	"endLineNumber": 135,
	"endColumn": 8
}]

[{
	"resource": "/c:/Users/Admin/Desktop/REFBOT/bot.py",
	"owner": "python",
	"severity": 8,
	"message": "\"(\" was not closed",
	"source": "Pylance",
	"startLineNumber": 189,
	"startColumn": 27,
	"endLineNumber": 189,
	"endColumn": 28
}]

[{
	"resource": "/c:/Users/Admin/Desktop/REFBOT/bot.py",
	"owner": "python",
	"severity": 8,
	"message": "Statements must be separated by newlines or semicolons",
	"source": "Pylance",
	"startLineNumber": 1141,
	"startColumn": 24,
	"endLineNumber": 1141,
	"endColumn": 24
}]