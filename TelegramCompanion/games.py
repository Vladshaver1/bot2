import random
import logging
import asyncio
from aiogram import types, Bot, F, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from models import GameStates
from database import get_user_stats, update_game_stats
from keyboards import (
    get_games_keyboard, get_bet_keyboard, get_number_guess_keyboard, get_back_button
)

logger = logging.getLogger(__name__)

# Register game handlers
def register_handlers(dp: Dispatcher, bot: Bot):
    # Games menu
    dp.callback_query.register(show_games_menu, F.data == "mini_games")
    
    # Dice game
    dp.callback_query.register(show_dice_game, F.data == "game_dice")
    dp.callback_query.register(process_dice_bet, F.data.startswith("bet_"))
    dp.callback_query.register(play_dice_game, F.data == "play_dice")
    
    # Number guess game
    dp.callback_query.register(show_number_game, F.data == "game_number")
    dp.callback_query.register(process_number_bet, F.data.startswith("bet_"), GameStates.number_guess_bet)
    dp.callback_query.register(process_number_guess, F.data.startswith("guess_"), GameStates.number_guess_playing)
    
    # Slot machine game
    dp.callback_query.register(show_slot_machine, F.data == "game_slot")
    dp.callback_query.register(process_slot_bet, F.data.startswith("bet_"), GameStates.slot_machine_bet)
    dp.callback_query.register(play_slot_machine, F.data == "play_slot")
    
    # Darts game
    dp.callback_query.register(show_darts_game, F.data == "game_darts")
    dp.callback_query.register(process_darts_bet, F.data.startswith("bet_"))
    dp.callback_query.register(play_darts_game, F.data == "play_darts")
    
    logger.info("Game handlers registered")

# Games menu handler
async def show_games_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üéÆ <b>–ú–∏–Ω–∏-–∏–≥—Ä—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã:",
        reply_markup=get_games_keyboard()
    )
    await callback.answer()

# Dice game handlers
async def show_dice_game(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üé≤ <b>–ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫–∏</b>\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –í—ã –∏ –±–æ—Ç –±—Ä–æ—Å–∞–µ—Ç–µ –∫—É–±–∏–∫–∏\n"
        "- –ï—Å–ª–∏ —É –≤–∞—Å –≤—ã–ø–∞–ª–æ –±–æ–ª—å—à–µ, –≤—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏\n"
        "- –ï—Å–ª–∏ —É –±–æ—Ç–∞ –≤—ã–ø–∞–ª–æ –±–æ–ª—å—à–µ, –≤—ã —Ç–µ—Ä—è–µ—Ç–µ —Å—Ç–∞–≤–∫—É\n"
        "- –ü—Ä–∏ —Ä–∞–≤–Ω–æ–º —Å—á–µ—Ç–µ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_keyboard()
    )
    await callback.answer()

async def process_dice_bet(callback: types.CallbackQuery):
    try:
        bet = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # Check if user has enough stars
        user_stats = get_user_stats(user_id)
        if not user_stats or user_stats[0] < bet:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
            return
        
        # Show play button
        buttons = [
            [InlineKeyboardButton(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏", callback_data="play_dice")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_dice")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            f"üé≤ <b>–ò–≥—Ä–∞ –≤ –∫—É–±–∏–∫–∏</b>\n\n"
            f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} –∑–≤–µ–∑–¥\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏!",
            reply_markup=keyboard
        )
        
        # Save bet in storage
        await callback.bot.fsm_storage.set_data(
            bot=callback.bot,
            chat_id=callback.message.chat.id,
            user_id=user_id,
            data={"dice_bet": bet}
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_dice_bet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏")

async def play_dice_game(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # Get the bet from storage
        data = await callback.bot.fsm_storage.get_data(
            bot=callback.bot,
            chat_id=callback.message.chat.id,
            user_id=user_id
        )
        bet = data.get("dice_bet", 0)
        
        if bet <= 0:
            await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ", show_alert=True)
            return
        
        # User's roll
        user_dice = await callback.message.answer_dice(emoji="üé≤")
        user_value = user_dice.dice.value
        await asyncio.sleep(2)  # Wait for animation
        
        # Bot's roll
        bot_dice = await callback.message.answer_dice(emoji="üé≤")
        bot_value = bot_dice.dice.value
        await asyncio.sleep(2)  # Wait for animation
        
        # Determine the winner
        result_text = ""
        stars_won = 0
        
        if user_value > bot_value:
            result_text = f"üéâ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b> –ü–æ–ª—É—á–µ–Ω–æ {bet} –∑–≤–µ–∑–¥!"
            stars_won = bet
        elif user_value < bot_value:
            result_text = f"üòî <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b> –ü–æ—Ç–µ—Ä—è–Ω–æ {bet} –∑–≤–µ–∑–¥."
            stars_won = -bet
        else:
            result_text = f"ü§ù <b>–ù–∏—á—å—è!</b> –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
            stars_won = 0
        
        # Update game stats in database
        update_game_stats(user_id, "dice", stars_won)
        
        # Send result message
        await callback.message.answer(
            f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –≤ –∫—É–±–∏–∫–∏</b>\n\n"
            f"–í–∞—à –±—Ä–æ—Å–æ–∫: {user_value}\n"
            f"–ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞: {bot_value}\n\n"
            f"{result_text}",
            reply_markup=get_games_keyboard()
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in play_dice_game: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ –∫—É–±–∏–∫–∏")

# Number guess game handlers
async def show_number_game(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(GameStates.number_guess_bet)
    await callback.message.edit_text(
        "üî¢ <b>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b>\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –ë–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10\n"
        "- –ï—Å–ª–∏ –≤—ã —É–≥–∞–¥–∞–µ—Ç–µ, —Ç–æ –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç–∞–≤–∫—É x5\n"
        "- –ï—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–µ—Ç–µ, —Ç–æ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å—Ç–∞–≤–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_keyboard()
    )
    await callback.answer()

async def process_number_bet(callback: types.CallbackQuery, state: FSMContext):
    try:
        bet = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # Check if user has enough stars
        user_stats = get_user_stats(user_id)
        if not user_stats or user_stats[0] < bet:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
            return
        
        # Save bet and set state
        await state.update_data(number_bet=bet)
        await state.set_state(GameStates.number_guess_playing)
        
        await callback.message.edit_text(
            f"üî¢ <b>–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ</b>\n\n"
            f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} –∑–≤–µ–∑–¥\n\n"
            f"–ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=get_number_guess_keyboard()
        )
        
        # Generate random number and save
        bot_number = random.randint(1, 10)
        await state.update_data(bot_number=bot_number)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_number_bet: {e}")
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏")

async def process_number_guess(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        user_guess = int(callback.data.split("_")[1])
        
        # Get stored data
        data = await state.get_data()
        bet = data.get("number_bet", 0)
        bot_number = data.get("bot_number", 0)
        
        if bet <= 0 or bot_number <= 0:
            await callback.answer("–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
            await state.clear()
            return
        
        # Determine result
        result_text = ""
        stars_won = 0
        
        if user_guess == bot_number:
            win_amount = bet * 5
            result_text = f"üéâ <b>–í—ã —É–≥–∞–¥–∞–ª–∏!</b> –ü–æ–ª—É—á–µ–Ω–æ {win_amount} –∑–≤–µ–∑–¥!"
            stars_won = win_amount
        else:
            result_text = f"üòî <b>–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏.</b> –ü–æ—Ç–µ—Ä—è–Ω–æ {bet} –∑–≤–µ–∑–¥.\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {bot_number}"
            stars_won = -bet
        
        # Update game stats
        update_game_stats(user_id, "number_guess", stars_won)
        
        # Send result
        await callback.message.edit_text(
            f"üî¢ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã ¬´–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ¬ª</b>\n\n"
            f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {bot_number}\n"
            f"–í–∞—à–µ —á–∏—Å–ª–æ: {user_guess}\n\n"
            f"{result_text}",
            reply_markup=get_games_keyboard()
        )
        
        # Clear state
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_number_guess: {e}")
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞")

# Slot machine game handlers
async def show_slot_machine(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(GameStates.slot_machine_bet)
    await callback.message.edit_text(
        "üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –í—ã –∫—Ä—É—Ç–∏—Ç–µ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É —Å —Ç—Ä–µ–º—è –±–∞—Ä–∞–±–∞–Ω–∞–º–∏\n"
        "- 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞: –≤—ã–∏–≥—Ä—ã—à x2\n"
        "- 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞: –≤—ã–∏–≥—Ä—ã—à x10\n"
        "- 3 —Å–µ–º–µ—Ä–∫–∏ (777): –¥–∂–µ–∫–ø–æ—Ç x50\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_keyboard()
    )
    await callback.answer()

async def process_slot_bet(callback: types.CallbackQuery, state: FSMContext):
    try:
        bet = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # Check if user has enough stars
        user_stats = get_user_stats(user_id)
        if not user_stats or user_stats[0] < bet:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
            return
        
        # Save bet
        await state.update_data(slot_bet=bet)
        
        # Show play button
        buttons = [
            [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å", callback_data="play_slot")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_slot")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            f"üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n"
            f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} –∑–≤–µ–∑–¥\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É!",
            reply_markup=keyboard
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_slot_bet: {e}")
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏")

async def play_slot_machine(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        
        # Get the bet from storage
        data = await state.get_data()
        bet = data.get("slot_bet", 0)
        
        if bet <= 0:
            await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ", show_alert=True)
            await state.clear()
            return
        
        # Define slot symbols
        symbols = ["üçí", "üçã", "üçä", "üçá", "üçé", "üíé", "7Ô∏è‚É£"]
        weights = [20, 20, 15, 15, 10, 5, 2]  # Distribution weights
        
        # Spin the reels
        reel1 = random.choices(symbols, weights=weights, k=1)[0]
        reel2 = random.choices(symbols, weights=weights, k=1)[0]
        reel3 = random.choices(symbols, weights=weights, k=1)[0]
        
        # Animation (simulate spinning)
        message = await callback.message.edit_text(
            f"üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n"
            f"–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n"
            f"[ ? ] [ ? ] [ ? ]"
        )
        
        # Simulate spinning animation
        await asyncio.sleep(0.5)
        await message.edit_text(
            f"üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n"
            f"–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n"
            f"[ {reel1} ] [ ? ] [ ? ]"
        )
        
        await asyncio.sleep(0.5)
        await message.edit_text(
            f"üé∞ <b>–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞</b>\n\n"
            f"–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...\n\n"
            f"[ {reel1} ] [ {reel2} ] [ ? ]"
        )
        
        await asyncio.sleep(0.5)
        
        # Determine result
        result_text = ""
        stars_won = 0
        
        slot_result = f"[ {reel1} ] [ {reel2} ] [ {reel3} ]"
        
        # Check for wins
        if reel1 == reel2 == reel3:
            if reel1 == "7Ô∏è‚É£":  # Jackpot
                win_amount = bet * 50
                result_text = f"üéâ <b>–î–ñ–ï–ö–ü–û–¢!!!</b> –ü–æ–ª—É—á–µ–Ω–æ {win_amount} –∑–≤–µ–∑–¥!"
            else:  # Three of a kind
                win_amount = bet * 10
                result_text = f"üéâ <b>–¢—Ä–∏ –≤ —Ä—è–¥!</b> –ü–æ–ª—É—á–µ–Ω–æ {win_amount} –∑–≤–µ–∑–¥!"
            stars_won = win_amount
        elif reel1 == reel2 or reel1 == reel3 or reel2 == reel3:
            win_amount = bet * 2
            result_text = f"üéâ <b>–î–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è!</b> –ü–æ–ª—É—á–µ–Ω–æ {win_amount} –∑–≤–µ–∑–¥!"
            stars_won = win_amount
        else:
            result_text = f"üòî <b>–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.</b> –ü–æ—Ç–µ—Ä—è–Ω–æ {bet} –∑–≤–µ–∑–¥."
            stars_won = -bet
        
        # Update game stats
        update_game_stats(user_id, "slot_machine", stars_won)
        
        # Send final result
        await message.edit_text(
            f"üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã</b>\n\n"
            f"{slot_result}\n\n"
            f"{result_text}",
            reply_markup=get_games_keyboard()
        )
        
        # Clear state
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in play_slot_machine: {e}")
        await state.clear()
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É")

# Darts game handlers
async def show_darts_game(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üéØ <b>–î–∞—Ä—Ç—Å</b>\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "- –í—ã –±—Ä–æ—Å–∞–µ—Ç–µ –¥—Ä–æ—Ç–∏–∫ –≤ –º–∏—à–µ–Ω—å\n"
        "- –û—á–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è:\n"
        "  ‚Ä¢ –¶–µ–Ω—Ç—Ä (6): –≤—ã–∏–≥—Ä—ã—à x5\n"
        "  ‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ (5): –≤—ã–∏–≥—Ä—ã—à x3\n"
        "  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∫—Ä—É–≥ (4): –≤—ã–∏–≥—Ä—ã—à x2\n"
        "  ‚Ä¢ –í–Ω–µ—à–Ω–∏–µ –∫—Ä—É–≥–∏ (1-3): —Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–Ω–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
        reply_markup=get_bet_keyboard()
    )
    await callback.answer()

async def process_darts_bet(callback: types.CallbackQuery):
    try:
        bet = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        
        # Check if user has enough stars
        user_stats = get_user_stats(user_id)
        if not user_stats or user_stats[0] < bet:
            await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
            return
        
        # Show play button
        buttons = [
            [InlineKeyboardButton(text="üéØ –ú–µ—Ç–Ω—É—Ç—å –¥—Ä–æ—Ç–∏–∫", callback_data="play_darts")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="game_darts")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            f"üéØ <b>–î–∞—Ä—Ç—Å</b>\n\n"
            f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} –∑–≤–µ–∑–¥\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –º–µ—Ç–Ω—É—Ç—å –¥—Ä–æ—Ç–∏–∫!",
            reply_markup=keyboard
        )
        
        # Save bet in storage
        await callback.bot.fsm_storage.set_data(
            bot=callback.bot,
            chat_id=callback.message.chat.id,
            user_id=user_id,
            data={"darts_bet": bet}
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_darts_bet: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏")

async def play_darts_game(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # Get the bet from storage
        data = await callback.bot.fsm_storage.get_data(
            bot=callback.bot,
            chat_id=callback.message.chat.id,
            user_id=user_id
        )
        bet = data.get("darts_bet", 0)
        
        if bet <= 0:
            await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ", show_alert=True)
            return
        
        # Throw the dart
        dart = await callback.message.answer_dice(emoji="üéØ")
        dart_value = dart.dice.value
        await asyncio.sleep(4)  # Wait for animation
        
        # Determine result
        result_text = ""
        stars_won = 0
        
        if dart_value == 6:  # Bullseye
            win_amount = bet * 5
            result_text = f"üéØ <b>–Ø–±–ª–æ—á–∫–æ!</b> –ü–æ–ª—É—á–µ–Ω–æ {win_amount} –∑–≤–µ–∑–¥!"
            stars_won = win_amount
        elif dart_value == 5:  # Inner circle
            win_amount = bet * 3
            result_text = f"üéØ <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥!</b> –ü–æ–ª—É—á–µ–Ω–æ {win_amount} –∑–≤–µ–∑–¥!"
            stars_won = win_amount
        elif dart_value == 4:  # Middle circle
            win_amount = bet * 2
            result_text = f"üéØ <b>–°—Ä–µ–¥–Ω–∏–π –∫—Ä—É–≥!</b> –ü–æ–ª—É—á–µ–Ω–æ {win_amount} –∑–≤–µ–∑–¥!"
            stars_won = win_amount
        else:  # Outer circles
            result_text = f"üòî <b>–í–Ω–µ—à–Ω–∏–µ –∫—Ä—É–≥–∏.</b> –ü–æ—Ç–µ—Ä—è–Ω–æ {bet} –∑–≤–µ–∑–¥."
            stars_won = -bet
        
        # Update game stats
        update_game_stats(user_id, "darts", stars_won)
        
        # Send result
        await callback.message.answer(
            f"üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –≤ –¥–∞—Ä—Ç—Å</b>\n\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {dart_value}/6\n\n"
            f"{result_text}",
            reply_markup=get_games_keyboard()
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in play_darts_game: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ –¥–∞—Ä—Ç—Å")
