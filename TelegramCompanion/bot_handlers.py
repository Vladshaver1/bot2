import logging
import random
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import datetime

from database import Database
from mini_games import Games
from config import GAME_DAILY_LIMIT

logger = logging.getLogger(__name__)
router = Router()
db = Database()
games = Games(db)

# FSM states
class WithdrawStates(StatesGroup):
    waiting_for_withdraw_amount = State()

# Main menu handler
@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id

        # Update user activity
        db.update_user_activity(user_id)

        buttons = [
            [InlineKeyboardButton(
                text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
                switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤–µ–∑–¥—ã! https://t.me/{(await callback_query.bot.get_me()).username}?start={user_id}"
            )],
            [
                InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_list"),
                InlineKeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
            ],
            [
                InlineKeyboardButton(text="üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="mini_games"),
                InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")
            ],
            [InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥", callback_data="withdraw"), InlineKeyboardButton(text="‚ùì FAQ", callback_data="show_faq")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Start command handler
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        full_name = message.from_user.full_name
        referral_id = None

        # Check if the message contains a referral code
        if len(message.text.split()) > 1:
            try:
                referral_id = int(message.text.split()[1])
            except ValueError:
                pass

        # Check if user already exists
        user = db.get_user(user_id)

        if not user:
            # Register new user
            db.add_user(user_id, username, full_name, referral_id)

            # Add referral bonus if needed
            if referral_id:
                db.increase_referral_count(referral_id)

            welcome_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!\n\n"
                "üíé –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π.\n\n"
                "üîπ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã\n"
                "üîπ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n"
                "üîπ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö\n"
                "üîπ –í—ã–≤–æ–¥–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã\n\n"
                "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
            )

            buttons = [
                [InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
                    switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤–µ–∑–¥—ã! https://t.me/{(await message.bot.get_me()).username}?start={user_id}"
                )],
                [
                    InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_list"),
                    InlineKeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
                ],
                [
                    InlineKeyboardButton(text="üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="mini_games"),
                    InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")
                ],
                [InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥", callback_data="withdraw"), InlineKeyboardButton(text="‚ùì FAQ", callback_data="show_faq")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await message.answer(welcome_text, reply_markup=keyboard)
        else:
            # Update user activity
            db.update_user_activity(user_id)

            buttons = [
                [InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
                    switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤–µ–∑–¥—ã! https://t.me/{(await message.bot.get_me()).username}?start={user_id}"
                )],
                [
                    InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="tasks_list"),
                    InlineKeyboardButton(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="my_balance")
                ],
                [
                    InlineKeyboardButton(text="üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="mini_games"),
                    InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")
                ],
                [InlineKeyboardButton(text="üí∏ –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥", callback_data="withdraw"), InlineKeyboardButton(text="‚ùì FAQ", callback_data="show_faq")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# My balance handler
@router.callback_query(F.data == "my_balance")
async def process_my_balance(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id

        stats = db.get_user_stats(user_id)
        settings = db.get_admin_settings()

        if stats and settings:
            stars, completed_tasks, referrals_count = stats
            min_referrals, min_tasks, partner_bonus, _, _ = settings

            balance_text = (
                f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {stars} –∑–≤–µ–∑–¥\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}/{min_tasks}\n"
                f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}/{min_referrals}\n\n"
            )

            if completed_tasks >= min_tasks and referrals_count >= min_referrals:
                balance_text += "üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥!"
            else:
                balance_text += (
                    f"‚ö† –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                    f"- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å {min_referrals} –¥—Ä—É–∑–µ–π (–æ—Å—Ç–∞–ª–æ—Å—å {max(0, min_referrals - referrals_count)})\n"
                    f"- –í—ã–ø–æ–ª–Ω–∏—Ç—å {min_tasks} –∑–∞–¥–∞–Ω–∏–π (–æ—Å—Ç–∞–ª–æ—Å—å {max(0, min_tasks - completed_tasks)})\n"
                )

            buttons = [
                [
                    InlineKeyboardButton(
                        text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞",
                        switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤–µ–∑–¥—ã! https://t.me/{(await callback_query.bot.get_me()).username}?start={user_id}"
                    )
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text(balance_text, reply_markup=keyboard)
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error in process_my_balance: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Tasks list handler
@router.callback_query(F.data == "tasks_list")
async def process_tasks_list(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        chat_id = callback_query.message.chat.id

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        regular_tasks = db.get_active_tasks()

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ Subgram
        from subgram_api import subgram_api
        status, code, message, sponsor_tasks = await subgram_api.get_sponsor_tasks(user_id, chat_id, limit=10)

        tasks_text = "üìù –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n"
        buttons = []

        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        if status == "ok" and sponsor_tasks:
            tasks_text += "üåü <b>–ó–ê–î–ê–ù–ò–Ø –û–¢ –°–ü–û–ù–°–û–†–û–í:</b>\n\n"

            for i, task in enumerate(sponsor_tasks):
                task_id = f"sg_{task.get('id')}"
                description = task.get('title', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                reward = task.get('reward', 0)
                url = task.get('url', '')

                tasks_text += f"üî∏ {description}\nüíé –ù–∞–≥—Ä–∞–¥–∞: {reward} —Ä—É–±.\n\n"

                buttons.append([InlineKeyboardButton(
                    text=f"üëâ {description[:20]}...", 
                    url=url
                )])

            tasks_text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

        # –ë–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ Subgram

        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
        if status != "ok" or not sponsor_tasks:
            tasks_text = "–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ."

        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(tasks_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error in process_tasks_list: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π")

# Complete task handler
@router.callback_query(F.data.startswith("complete_task_"))
async def complete_task(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        chat_id = callback_query.message.chat.id
        task_id = int(callback_query.data.split("_")[2])

        # Complete the task
        reward = db.complete_task(user_id, task_id)

        if reward:
            await callback_query.answer(f"–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {reward} –∑–≤–µ–∑–¥")

            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
            await process_tasks_list(callback_query)
        else:
            await callback_query.answer("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    except Exception as e:
        logger.error(f"Error in complete_task: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")

# Mini-games handler
@router.callback_query(F.data == "mini_games")
async def show_mini_games(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        daily_games = db.get_user_game_stats(user_id)

        games_text = (
            f"üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã:\n\n"
            f"–°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {daily_games}/{GAME_DAILY_LIMIT}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
        )

        buttons = [
            [
                InlineKeyboardButton(text="üé≤ –ö–æ—Å—Ç–∏", callback_data="play_dice"),
                InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç—ã", callback_data="play_slots")
            ],
            [InlineKeyboardButton(text="üí∞ –ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥", callback_data="steal_stars")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(games_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in show_mini_games: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Play dice game
@router.callback_query(F.data == "play_dice")
async def play_dice_game(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id

        can_play, dice_result, reward = await games.play_dice(user_id)

        if not can_play:
            await callback_query.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
            return

        result_text = (
            f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞: {dice_result}\n\n"
            f"{'üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ' + str(reward) + ' –∑–≤–µ–∑–¥!' if reward > 0 else 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏'}\n\n"
            f"–°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {db.get_user_game_stats(user_id)}/{GAME_DAILY_LIMIT}"
        )

        buttons = [
            [
                InlineKeyboardButton(text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="play_dice"),
                InlineKeyboardButton(text="üîô –ö –∏–≥—Ä–∞–º", callback_data="mini_games")
            ],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(result_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in play_dice_game: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Play slots game
@router.callback_query(F.data == "play_slots")
async def play_slots_game(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id

        can_play, symbols, reward = await games.play_slots(user_id)

        if not can_play:
            await callback_query.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
            return

        symbols_str = " ".join(symbols) if symbols else "üé∞ üé∞ üé∞"

        result_text = (
            f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {symbols_str}\n\n"
            f"{'üéâ –î–∂–µ–∫–ø–æ—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ' + str(reward) + ' –∑–≤–µ–∑–¥!' if reward > 0 else 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏'}\n\n"
            f"–°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {db.get_user_game_stats(user_id)}/{GAME_DAILY_LIMIT}"
        )

        buttons = [
            [
                InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="play_slots"),
                InlineKeyboardButton(text="üîô –ö –∏–≥—Ä–∞–º", callback_data="mini_games")
            ],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(result_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in play_slots_game: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Steal stars - select user
@router.callback_query(F.data == "steal_stars")
async def steal_stars_step1(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id

        # Check if user has unlocked the steal feature
        user_stats = db.get_user_stats(user_id)
        settings = db.get_admin_settings()

        if user_stats and settings:
            stars, completed_tasks, referrals_count = user_stats
            _, _, _, _, steal_unlock_tasks = settings

            if completed_tasks < steal_unlock_tasks:
                await callback_query.message.edit_text(
                    f"‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∞–∂–µ –∑–≤–µ–∑–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å {steal_unlock_tasks} –∑–∞–¥–∞–Ω–∏–π.\n"
                    f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}/{steal_unlock_tasks}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ö –∏–≥—Ä–∞–º", callback_data="mini_games")]
                    ])
                )
                return

            # Check daily limit
            daily_games = db.get_user_game_stats(user_id)
            if daily_games >= GAME_DAILY_LIMIT:
                await callback_query.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
                return

            # Get top users to steal from
            top_users = db.get_top_users(10)

            steal_text = (
                "üí∞ –ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∫—Ä–∞—Å—Ç—å –∑–≤–µ–∑–¥—ã:"
            )

            buttons = []
            for user in top_users:
                victim_id, username, full_name, stars, _, _ = user

                # Skip the current user
                if victim_id == user_id:
                    continue

                display_name = username or full_name or f"User {victim_id}"
                buttons.append([InlineKeyboardButton(
                    text=f"{display_name} ({stars} –∑–≤–µ–∑–¥)", 
                    callback_data=f"steal_from_{victim_id}"
                )])

            buttons.append([InlineKeyboardButton(text="üîô –ö –∏–≥—Ä–∞–º", callback_data="mini_games")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text(steal_text, reply_markup=keyboard)
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error in steal_stars_step1: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Steal stars - execute
@router.callback_query(F.data.startswith("steal_from_"))
async def steal_stars_execute(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        victim_id = int(callback_query.data.split("_")[2])

        success, amount = await games.play_steal(user_id, victim_id)

        if success:
            victim = db.get_user(victim_id)
            victim_name = victim[1] or victim[2] or f"User {victim_id}"

            result_text = (
                f"üé≠ –ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥\n\n"
                f"üéâ –£—Å–ø–µ—à–Ω–æ! –í—ã —É–∫—Ä–∞–ª–∏ {amount} –∑–≤–µ–∑–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {victim_name}.\n\n"
                f"–°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {db.get_user_game_stats(user_id)}/{GAME_DAILY_LIMIT}"
            )
        else:
            result_text = (
                f"üé≠ –ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥\n\n"
                f"üòî –ù–µ—É–¥–∞—á–∞! –í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —É–∫—Ä–∞—Å—Ç—å –∑–≤–µ–∑–¥—ã.\n\n"
                f"–°—ã–≥—Ä–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {db.get_user_game_stats(user_id)}/{GAME_DAILY_LIMIT}"
            )

        buttons = [
            [
                InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="steal_stars"),
                InlineKeyboardButton(text="üîô –ö –∏–≥—Ä–∞–º", callback_data="mini_games")
            ],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(result_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error in steal_stars_execute: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Leaderboard handler
@router.callback_query(F.data == "top_players")
async def show_top_players(callback_query: types.CallbackQuery):
    try:
        top_users = db.get_top_users()

        if top_users:
            top_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥:\n\n"

            for idx, user in enumerate(top_users, 1):
                user_id, username, full_name, stars, referrals, tasks = user
                display_name = username or full_name or f"User {user_id}"

                top_text += f"{idx}. {display_name} - {stars} –∑–≤–µ–∑–¥\n"

            buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text(top_text, reply_markup=keyboard)
        else:
            await callback_query.message.edit_text(
                "–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–æ–ø–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"Error in show_top_players: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Withdrawal handler
@router.callback_query(F.data == "withdraw")
async def withdraw_stars(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id

        user_stats = db.get_user_stats(user_id)
        settings = db.get_admin_settings()

        if user_stats and settings:
            stars, completed_tasks, referrals_count = user_stats
            min_referrals, min_tasks, _, _, _ = settings

            if completed_tasks < min_tasks or referrals_count < min_referrals:
                withdraw_text = (
                    f"‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥!\n\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è:\n"
                    f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å {min_tasks} –∑–∞–¥–∞–Ω–∏–π (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks})\n"
                    f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å {min_referrals} –¥—Ä—É–∑–µ–π (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referrals_count})\n"
                )

                buttons = [
                    [
                        InlineKeyboardButton(
                            text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", 
                            switch_inline_query=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤–µ–∑–¥—ã! https://t.me/{(await callback_query.bot.get_me()).username}?start={user_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üìù –ö –∑–∞–¥–∞–Ω–∏—è–º", callback_data="tasks_list"),
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                    ]
                ]
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

                await callback_query.message.edit_text(withdraw_text, reply_markup=keyboard)
                return

            if stars <= 0:
                await callback_query.message.edit_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                    ])
                )
                return

            withdraw_text = (
                f"üí∏ –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {stars} –∑–≤–µ–∑–¥\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞:"
            )

            buttons = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text(withdraw_text, reply_markup=keyboard)

            # Set state for withdrawal amount
            await callback_query.bot.get_current().dispatcher.get_fsm_context().set_state(
                user_id=user_id, 
                chat_id=callback_query.message.chat.id,
                state=WithdrawStates.waiting_for_withdraw_amount
            )
        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Error in withdraw_stars: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Process withdrawal amount
@router.message(WithdrawStates.waiting_for_withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id

        # Get current stars
        user_stats = db.get_user_stats(user_id)
        if not user_stats:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            await state.clear()
            return

        stars = user_stats[0]

        try:
            amount = int(message.text.strip())

            if amount <= 0:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                    ])
                )
                return

            if amount > stars:
                await message.answer(
                    f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –î–æ—Å—Ç—É–ø–Ω–æ: {stars}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                    ])
                )
                return

            # Process withdrawal request
            if db.request_withdrawal(user_id, amount):
                await message.answer(
                    f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                await state.clear()
            else:
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                await state.clear()

        except ValueError:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
                ])
            )

    except Exception as e:
        logger.error(f"Error in process_withdraw_amount: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await state.clear()

# FAQ handler
@router.callback_query(F.data == "show_faq")
async def show_faq(callback_query: types.CallbackQuery):
    try:
        faq_text = (
            "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
            "1Ô∏è‚É£ <b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã?</b>\n"
            "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n"
            "‚Ä¢ –ò–≥—Ä–∞–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã\n\n"
            "2Ô∏è‚É£ <b>–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã?</b>\n"
            "‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥'\n\n"
            "3Ô∏è‚É£ <b>–ß—Ç–æ —Ç–∞–∫–æ–µ Subgram?</b>\n"
            "‚Ä¢ –≠—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –∑–≤–µ–∑–¥ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã\n\n"
            "4Ô∏è‚É£ <b>–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π?</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π'\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ"
        )

        buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback_query.message.edit_text(faq_text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in show_faq: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")