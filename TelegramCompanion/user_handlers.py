import logging
import random
from aiogram import types, Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import (
    register_user, get_user_stats, get_admin_settings, get_tasks,
    complete_task, get_top_users, update_user_stars
)
from keyboards import (
    get_main_menu_keyboard, get_back_button, get_tasks_keyboard
)
from utils import escape_html

logger = logging.getLogger(__name__)

# Register handlers
def register_handlers(dp: Dispatcher, bot: Bot):
    # Basic commands
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    
    # Menu navigation
    dp.callback_query.register(show_main_menu, F.data == "main_menu")
    dp.callback_query.register(show_balance, F.data == "my_balance")
    dp.callback_query.register(show_tasks, F.data == "tasks_list")
    dp.callback_query.register(show_top_players, F.data == "top_players")
    
    # Task completion
    dp.callback_query.register(complete_task_handler, F.data.startswith("complete_task_"))
    
    # Steal stars feature
    dp.callback_query.register(steal_stars, F.data.startswith("steal_stars_"))
    
    logger.info("User handlers registered")

# Command handlers
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        full_name = message.from_user.full_name
        referral_id = None
        
        # Check for referral
        if len(message.text.split()) > 1:
            try:
                referral_id = int(message.text.split()[1])
                # Don't allow self-referrals
                if referral_id == user_id:
                    referral_id = None
            except ValueError:
                pass
        
        # Register user
        is_new = register_user(user_id, username, full_name, referral_id)
        
        if is_new:
            # Welcome message for new users
            welcome_text = (
                "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!</b>\n\n"
                "üíé –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π.\n\n"
                "üîπ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã\n"
                "üîπ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n"
                "üîπ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö\n"
                "üîπ –í—ã–≤–æ–¥–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã\n\n"
                "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
            )
            
            bot_info = await bot.get_me()
            keyboard = get_main_menu_keyboard(user_id, bot_info.username)
            
            await message.answer(welcome_text, reply_markup=keyboard)
        else:
            # Returning user message
            await show_main_menu_message(message, bot)
            
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cmd_help(message: types.Message):
    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã:</b>\n"
        "- –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π¬ª\n"
        "- –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ\n"
        "- –ò–≥—Ä–∞–π—Ç–µ –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∑–≤–µ–∑–¥—ã\n\n"
        "<b>–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥:</b>\n"
        "–î–ª—è –≤—ã–≤–æ–¥–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è:\n"
        "1. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π\n"
        "2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –∑–≤–µ–∑–¥—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã –∏–ª–∏ –¥–µ–Ω—å–≥–∏!"
    )
    
    bot_info = await message.bot.get_me()
    keyboard = get_main_menu_keyboard(message.from_user.id, bot_info.username)
    
    await message.answer(help_text, reply_markup=keyboard)

# Menu navigation
async def show_main_menu(callback: types.CallbackQuery):
    await show_main_menu_message(callback.message, callback.bot, is_edit=True)
    await callback.answer()

async def show_main_menu_message(message: types.Message, bot: Bot, is_edit=False):
    bot_info = await bot.get_me()
    keyboard = get_main_menu_keyboard(message.chat.id, bot_info.username)
    
    menu_text = (
        "üåü <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    )
    
    if is_edit:
        await message.edit_text(menu_text, reply_markup=keyboard)
    else:
        await message.answer(menu_text, reply_markup=keyboard)

async def show_balance(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        user_stats = get_user_stats(user_id)
        
        if user_stats:
            stars, completed_tasks, referrals_count = user_stats
            
            settings = get_admin_settings()
            if settings:
                min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks = settings
                
                balance_text = (
                    f"üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>: {stars} –∑–≤–µ–∑–¥\n\n"
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}/{min_tasks}\n"
                    f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}/{min_referrals}\n\n"
                )
                
                if completed_tasks >= min_tasks and referrals_count >= min_referrals:
                    balance_text += "üéâ <b>–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥!</b>"
                    
                    buttons = [
                        [InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã", callback_data="withdraw")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                    ]
                    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                else:
                    balance_text += (
                        f"‚ö†Ô∏è <b>–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</b>\n"
                        f"- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å {min_referrals} –¥—Ä—É–∑–µ–π (–æ—Å—Ç–∞–ª–æ—Å—å {max(0, min_referrals - referrals_count)})\n"
                        f"- –í—ã–ø–æ–ª–Ω–∏—Ç—å {min_tasks} –∑–∞–¥–∞–Ω–∏–π (–æ—Å—Ç–∞–ª–æ—Å—å {max(0, min_tasks - completed_tasks)})\n"
                    )
                    
                    # Add steal feature if eligible
                    if completed_tasks >= steal_unlock_tasks:
                        balance_text += f"\nüîì <b>–î–æ—Å—Ç—É–ø–Ω–∞ –∫—Ä–∞–∂–∞ –∑–≤–µ–∑–¥!</b>\n–í—ã –º–æ–∂–µ—Ç–µ —É–∫—Ä–∞—Å—Ç—å {steal_percent}% –∑–≤–µ–∑–¥ —É —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                        
                        buttons = [
                            [InlineKeyboardButton(text="üîç –£–∫—Ä–∞—Å—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="steal_stars_random")],
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                        ]
                        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                    else:
                        balance_text += f"\nüîí <b>–ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</b>\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ {max(0, steal_unlock_tasks - completed_tasks)} –∑–∞–¥–∞–Ω–∏–π, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å."
                        keyboard = get_back_button()
            else:
                balance_text = "üíé <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>: {stars} –∑–≤–µ–∑–¥\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                keyboard = get_back_button()
        else:
            balance_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ."
            keyboard = get_back_button()
        
        await callback.message.edit_text(balance_text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in show_balance: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

async def show_tasks(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        user_tasks = get_tasks(user_id)
        
        if user_tasks:
            tasks_text = "üìù <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
            
            for task_id, description, reward, completed in user_tasks:
                status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if completed else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                tasks_text += f"{task_id}. {escape_html(description)}\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–≤–µ–∑–¥ ({status})\n\n"
            
            keyboard = get_tasks_keyboard(user_tasks, user_id)
        else:
            tasks_text = "üìù <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π</b>\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
            keyboard = get_back_button()
        
        await callback.message.edit_text(tasks_text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in show_tasks: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π")

async def show_top_players(callback: types.CallbackQuery):
    try:
        top_users = get_top_users(10)
        
        if top_users:
            top_text = "üèÜ <b>–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
            
            for i, (user_id, username, full_name, stars, referrals) in enumerate(top_users, 1):
                user_name = username if username else full_name
                if i == 1:
                    top_text += f"ü•á {i}. {escape_html(user_name)} - {stars} –∑–≤–µ–∑–¥, {referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                elif i == 2:
                    top_text += f"ü•à {i}. {escape_html(user_name)} - {stars} –∑–≤–µ–∑–¥, {referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                elif i == 3:
                    top_text += f"ü•â {i}. {escape_html(user_name)} - {stars} –∑–≤–µ–∑–¥, {referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                else:
                    top_text += f"üî∏ {i}. {escape_html(user_name)} - {stars} –∑–≤–µ–∑–¥, {referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        else:
            top_text = "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤</b>\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö."
        
        await callback.message.edit_text(top_text, reply_markup=get_back_button())
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in show_top_players: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤")

# Task completion
async def complete_task_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        task_id = int(callback.data.split("_")[2])
        
        success, message_text = complete_task(user_id, task_id)
        
        await callback.answer(message_text, show_alert=True)
        
        # Refresh tasks list
        await show_tasks(callback)
    except Exception as e:
        logger.error(f"Error in complete_task_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")

# Steal stars feature
async def steal_stars(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # Get user stats
        user_stats = get_user_stats(user_id)
        if not user_stats:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
        
        # Get admin settings
        settings = get_admin_settings()
        if not settings:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.", show_alert=True)
            return
        
        completed_tasks = user_stats[1]
        min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks = settings
        
        # Check if the user can steal
        if completed_tasks < steal_unlock_tasks:
            await callback.answer(
                f"üîí –ö—Ä–∞–∂–∞ –∑–≤–µ–∑–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –µ—â–µ {steal_unlock_tasks - completed_tasks} –∑–∞–¥–∞–Ω–∏–π.",
                show_alert=True
            )
            return
        
        # Get top users to steal from (except the current user)
        top_users = get_top_users(50)
        if not top_users:
            await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥.", show_alert=True)
            return
        
        # Filter out current user and users with no stars
        potential_victims = [(uid, stars) for uid, _, _, stars, _ in top_users 
                            if uid != user_id and stars > 0]
        
        if not potential_victims:
            await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥.", show_alert=True)
            return
        
        # Randomly select a victim
        victim_id, victim_stars = random.choice(potential_victims)
        
        # Calculate stars to steal
        stars_to_steal = max(1, int(victim_stars * (steal_percent / 100)))
        
        # Update user balances
        if update_user_stars(victim_id, -stars_to_steal) and update_user_stars(user_id, stars_to_steal):
            await callback.answer(
                f"üîç –í—ã —É–∫—Ä–∞–ª–∏ {stars_to_steal} –∑–≤–µ–∑–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {victim_id}!",
                show_alert=True
            )
            
            # Refresh balance
            await show_balance(callback)
        else:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∞–∂–µ –∑–≤–µ–∑–¥.", show_alert=True)
    except Exception as e:
        logger.error(f"Error in steal_stars: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫—Ä–∞–∂–µ –∑–≤–µ–∑–¥")
