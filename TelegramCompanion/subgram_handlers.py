import datetime
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import json
import aiohttp
import os
from typing import Optional, List, Dict, Any

from subgram_api import subgram_api
from keyboards import get_main_menu_keyboard, get_back_button
from database import Database
from config import ADMIN_ID

# URL web-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–æ–≤
WEB_SERVER_URL = os.environ.get('WEB_SERVER_URL', 'http://localhost:5000')

async def log_offer_to_database(user_id, offer_url, offer_id='', channel_name='', reward_amount=10):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        api_url = f"{WEB_SERVER_URL}/api/subgram/log_offer"
        payload = {
            "user_id": user_id,
            "offer_url": offer_url,
            "offer_id": offer_id,
            "channel_name": channel_name,
            "reward_amount": reward_amount
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=payload) as response:
                if response.status == 200 or response.status == 201:
                    result = await response.json()
                    logger.info(f"Offer logged successfully: {result}")
                    return result
                else:
                    logger.error(f"Failed to log offer: HTTP {response.status}")
                    return None
    except Exception as e:
        logger.error(f"Error logging offer to database: {e}")
        return None

async def update_offer_status(user_id, offer_url, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ñ—Ñ–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        api_url = f"{WEB_SERVER_URL}/api/subgram/update_offer"
        payload = {
            "user_id": user_id,
            "offer_url": offer_url,
            "status": status
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(api_url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"Offer status updated successfully: {result}")
                    return result
                else:
                    logger.error(f"Failed to update offer status: HTTP {response.status}")
                    return None
    except Exception as e:
        logger.error(f"Error updating offer status: {e}")
        return None

logger = logging.getLogger(__name__)
router = Router()

db = Database()

class SubgramStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_confirmation = State()

class RequiredChannelStates(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_channel_name = State()
    waiting_for_stars_reward = State()
    waiting_for_confirmation = State()

@router.callback_query(F.data == "subgram_integration")
async def show_subgram_menu(callback_query: types.CallbackQuery):
    """Show Subgram integration menu"""
    user_id = callback_query.from_user.id

    # Check if user exists in Subgram
    user_info = await subgram_api.get_user_info(user_id)

    # Build button list
    buttons = [
        [
            types.InlineKeyboardButton(
                text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å Subgram", 
                callback_data="check_subgram_balance"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="–û–±–º–µ–Ω—è—Ç—å –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å Subgram", 
                callback_data="exchange_stars_to_subgram"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏", 
                callback_data="check_required_subscriptions"
            )
        ]
    ]

    # Add admin buttons if user is admin
    if str(user_id) in ADMIN_ID.split(','):
        buttons.append([
            types.InlineKeyboardButton(
                text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", 
                callback_data="manage_required_channels"
            )
        ])

    # Add back button
    buttons.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="main_menu"
        )
    ])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    text = "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Subgram\n\n"

    if user_info:
        text += f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω —Å Subgram\n\n"
        # Get Subgram balance if available
        balance = await subgram_api.get_user_balance(user_info.get('id'))
        if balance is not None:
            text += f"üí∞ –ë–∞–ª–∞–Ω—Å –≤ Subgram: {balance} —Ä—É–±.\n"
    else:
        # Register user in Subgram
        registration = await subgram_api.register_user(
            user_id,
            username=callback_query.from_user.username,
            first_name=callback_query.from_user.first_name,
            last_name=callback_query.from_user.last_name
        )

        if registration and registration.get('success'):
            text += "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Subgram!\n"
        else:
            text += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ Subgram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"

    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "check_subgram_balance")
async def check_subgram_balance(callback_query: types.CallbackQuery):
    """Check Subgram balance"""
    user_id = callback_query.from_user.id

    # Get user info from Subgram
    user_info = await subgram_api.get_user_info(user_id)

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ Subgram", 
                    callback_data="subgram_integration"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                    callback_data="main_menu"
                )
            ]
        ]
    )

    if user_info:
        subgram_id = user_info.get('id')
        balance = await subgram_api.get_user_balance(subgram_id)

        if balance is not None:
            text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –≤ Subgram: {balance} —Ä—É–±.\n"
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
    else:
        text = "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Subgram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é Subgram –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"

    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "exchange_stars_to_subgram")
async def start_exchange_stars(callback_query: types.CallbackQuery, state: FSMContext):
    """Start process of exchanging stars to Subgram balance"""
    user_id = callback_query.from_user.id

    # Get user stats
    user = db.get_user(user_id)
    if not user:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # Check if user has stars to exchange
    if user['stars'] <= 0:
        await callback_query.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è –æ–±–º–µ–Ω–∞.\n"
            "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã!",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="subgram_integration"
                    )
                ]]
            )
        )
        return

    # Set state and ask for amount
    await state.set_state(SubgramStates.waiting_for_amount)

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=f"{min(10, user['stars'])} ‚≠ê", 
                    callback_data=f"exchange_amount:{min(10, user['stars'])}"
                ),
                types.InlineKeyboardButton(
                    text=f"{min(50, user['stars'])} ‚≠ê", 
                    callback_data=f"exchange_amount:{min(50, user['stars'])}"
                ),
                types.InlineKeyboardButton(
                    text=f"{min(100, user['stars'])} ‚≠ê", 
                    callback_data=f"exchange_amount:{min(100, user['stars'])}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="–ú–∞–∫—Å–∏–º—É–º", 
                    callback_data=f"exchange_amount:{user['stars']}"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data="subgram_integration"
                )
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"üí´ –£ –≤–∞—Å {user['stars']} –∑–≤–µ–∑–¥\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å Subgram.\n"
        f"–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 –∑–≤–µ–∑–¥–∞ = 0.3 —Ä—É–±–ª—è",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("exchange_amount:"), SubgramStates.waiting_for_amount)
async def confirm_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    """Confirm exchange amount"""
    amount = int(callback_query.data.split(":")[1])
    user_id = callback_query.from_user.id

    # Store amount in state
    await state.update_data(amount=amount)

    # Calculate Subgram amount (conversion rate)
    subgram_amount = amount * 0.3  # 1 star = 0.3 rub

    # Set confirmation state
    await state.set_state(SubgramStates.waiting_for_confirmation)

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                    callback_data="confirm_exchange"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data="cancel_exchange"
                )
            ]
        ]
    )

    await callback_query.message.edit_text(
        f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–±–º–µ–Ω—è—Ç—å {amount} –∑–≤–µ–∑–¥ –Ω–∞ {subgram_amount:.2f} —Ä—É–±. –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ Subgram.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "confirm_exchange", SubgramStates.waiting_for_confirmation)
async def process_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    """Process the exchange of stars to Subgram balance"""
    user_id = callback_query.from_user.id

    # Get data from state
    state_data = await state.get_data()
    amount = state_data.get("amount", 0)

    # Get user from database
    user = db.get_user(user_id)
    if not user:
        await callback_query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return

    # Check if user has enough stars
    if user['stars'] < amount:
        await callback_query.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±–º–µ–Ω–∞.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="subgram_integration"
                    )
                ]]
            )
        )
        await state.clear()
        return

    # Get user info from Subgram
    user_info = await subgram_api.get_user_info(user_id)

    if not user_info:
        await callback_query.message.edit_text(
            "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Subgram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é Subgram.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ Subgram", 
                        callback_data="subgram_integration"
                    )
                ]]
            )
        )
        await state.clear()
        return

    # Calculate Subgram amount
    subgram_amount = amount * 0.3  # 1 star = 0.3 rub

    # Create transaction in Subgram
    transaction = await subgram_api.create_transaction(
        user_info.get('id'),
        subgram_amount,
        f"–û–±–º–µ–Ω {amount} –∑–≤–µ–∑–¥ –∏–∑ Stars Bot"
    )

    if transaction and transaction.get('success'):
        # Deduct stars from user
        db.update_user_stars(user_id, -amount)

        # Update completed tasks counter and user activity
        db.cursor.execute('''
            UPDATE users 
            SET completed_tasks = completed_tasks + 1,
                last_activity = datetime('now')
            WHERE user_id = ?
        ''', (user_id,))
        db.conn.commit()

        # Sync with PostgreSQL through the web API
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{WEB_SERVER_URL}/api/users/update_tasks", 
                    json={"user_id": user_id}) as response:
                    if response.status != 200:
                        logger.error("Failed to sync task completion with web API")
        except Exception as e:
            logger.error(f"Error syncing task completion: {e}")

        # Log exchange in the database
        db.log_subgram_exchange(user_id, amount, subgram_amount, 'completed')
        logger.info(f"Subgram exchange logged: User {user_id} exchanged {amount} stars for {subgram_amount} rubles")

        await callback_query.message.edit_text(
            f"‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"–í—ã –æ–±–º–µ–Ω—è–ª–∏ {amount} –∑–≤–µ–∑–¥ –Ω–∞ {subgram_amount:.2f} —Ä—É–±.\n"
            f"–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å Subgram.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ Subgram", 
                            callback_data="subgram_integration"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            callback_data="main_menu"
                        )
                    ]
                ]
            )
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="subgram_integration"
                    )
                ]]
            )
        )

    # Clear state
    await state.clear()

@router.callback_query(F.data == "cancel_exchange")
async def cancel_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    """Cancel the exchange process"""
    await state.clear()
    await callback_query.message.edit_text(
        "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="subgram_integration"
                )
            ]]
        )
    )

@router.callback_query(F.data == "check_required_subscriptions")
async def check_required_subscriptions(callback_query: types.CallbackQuery):
    """Check if user is subscribed to all required channels"""
    user_id = callback_query.from_user.id

    # Get user info from Subgram
    user_info = await subgram_api.get_user_info(user_id)
    if not user_info:
        await callback_query.message.edit_text(
            "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Subgram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é Subgram –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="subgram_integration"
                    )
                ]]
            )
        )
        return

    # Get list of required channels
    required_channels = await subgram_api.get_required_channels()
    if not required_channels or not isinstance(required_channels, list):
        await callback_query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="subgram_integration"
                    )
                ]]
            )
        )
        return

    # Check subscriptions and build message
    text = "üì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"

    if not required_channels:
        text += "‚úÖ –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"
    else:
        total_channels = len(required_channels)
        subscribed_count = 0
        buttons = []

        # Get previously rewarded channels
        rewarded_channels = db.get_user_subscription_rewards(user_id)
        rewarded_channel_ids = [item[0] for item in rewarded_channels] if rewarded_channels else []

        for channel in required_channels:
            channel_id = channel.get('channel_id')
            channel_name = channel.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            stars_reward = channel.get('stars_reward', 0)

            is_subscribed = await subgram_api.check_subscription(user_info.get('id'), channel_id)

            if is_subscribed:
                subscribed_count += 1
                already_rewarded = channel_id in rewarded_channel_ids

                if already_rewarded:
                    text += f"‚úÖ {channel_name} - –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã (–Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞)\n"
                else:
                    text += f"‚úÖ {channel_name} - –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å {stars_reward} –∑–≤–µ–∑–¥\n"
                    # Add claim reward button
                    buttons.append([
                        types.InlineKeyboardButton(
                            text=f"üí∞ –ü–æ–ª—É—á–∏—Ç—å {stars_reward} –∑–≤–µ–∑–¥ –∑–∞ {channel_name}", 
                            callback_data=f"claim_subscription_reward:{channel_id}:{channel_name}:{stars_reward}"
                        )
                    ])
            else:
                text += f"‚ùå {channel_name} - –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã (–Ω–∞–≥—Ä–∞–¥–∞: {stars_reward} –∑–≤–µ–∑–¥)\n"
                # Add link to subscribe
                text += f"üëâ https://t.me/{channel_id.replace('@', '')}\n\n"

        text += f"\n–ò—Ç–æ–≥–æ: {subscribed_count}/{total_channels} –ø–æ–¥–ø–∏—Å–æ–∫\n"

        if subscribed_count == total_channels:
            text += "\nüéâ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã üëá"

    # Add button to check again
    check_button = [
        types.InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", 
            callback_data="check_required_subscriptions"
        )
    ]
    back_button = [
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="subgram_integration"
        )
    ]

    # Build final keyboard
    all_buttons = buttons + [check_button, back_button]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=all_buttons)

    await callback_query.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(F.data.startswith("claim_subscription_reward:"))
async def claim_subscription_reward(callback_query: types.CallbackQuery):
    """Claim reward for channel subscription"""
    user_id = callback_query.from_user.id
    parts = callback_query.data.split(":")

    if len(parts) < 4:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    channel_id = parts[1]
    channel_name = parts[2]
    stars_reward = int(parts[3])

    # Get user info from Subgram
    user_info = await subgram_api.get_user_info(user_id)
    if not user_info:
        await callback_query.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Subgram.", show_alert=True)
        return

    # Verify subscription
    is_subscribed = await subgram_api.check_subscription(user_info.get('id'), channel_id)
    if not is_subscribed:
        await callback_query.answer(
            f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.",
            show_alert=True
        )
        return

    # Log reward in database
    success = db.log_subscription_reward(user_id, channel_id, channel_name, stars_reward)

    if success:
        await callback_query.answer(
            f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {stars_reward} –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {channel_name}!",
            show_alert=True
        )
        # Refresh the subscriptions list
        await check_required_subscriptions(callback_query)
    else:
        # Already rewarded
        await callback_query.answer(
            f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.",
            show_alert=True
        )

@router.callback_query(F.data == "manage_required_channels")
async def manage_required_channels(callback_query: types.CallbackQuery):
    """Admin function to manage required channels"""
    user_id = callback_query.from_user.id

    # Check if user is admin
    if str(user_id) not in ADMIN_ID.split(','):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # Get list of required channels
    required_channels = await subgram_api.get_required_channels()

    text = "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:\n\n"

    if not required_channels or not isinstance(required_channels, list):
        text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
    else:
        for i, channel in enumerate(required_channels, 1):
            channel_id = channel.get('channel_id', 'Unknown')
            channel_name = channel.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            stars_reward = channel.get('stars_reward', 0)

            text += f"{i}. {channel_name} ({channel_id})\n"
            text += f"   –ù–∞–≥—Ä–∞–¥–∞: {stars_reward} –∑–≤–µ–∑–¥\n\n"

    # Create keyboard
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", 
                    callback_data="add_required_channel"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", 
                    callback_data="remove_required_channel"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="subgram_integration"
                )
            ]
        ]
    )

    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data == "add_required_channel")
async def start_add_channel(callback_query: types.CallbackQuery, state: FSMContext):
    """Start process of adding a required channel"""
    user_id = callback_query.from_user.id

    # Check if user is admin
    if str(user_id) not in ADMIN_ID.split(','):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    await state.set_state(RequiredChannelStates.waiting_for_channel_id)

    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channel_id:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data="manage_required_channels"
                )
            ]]
        )
    )

@router.message(RequiredChannelStates.waiting_for_channel_id)
async def process_channel_id(message: types.Message, state: FSMContext):
    """Process channel ID input"""
    channel_id = message.text.strip()

    # Validate channel_id format
    if not channel_id.startswith('@'):
        await message.reply(
            "‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ @\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @channel_id:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", 
                        callback_data="manage_required_channels"
                    )
                ]]
            )
        )
        return

    # Save channel ID to state
    await state.update_data(channel_id=channel_id)

    # Move to next state
    await state.set_state(RequiredChannelStates.waiting_for_channel_name)

    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data="manage_required_channels"
                )
            ]]
        )
    )

@router.message(RequiredChannelStates.waiting_for_channel_name)
async def process_channel_name(message: types.Message, state: FSMContext):
    """Process channel name input"""
    channel_name = message.text.strip()

    # Save channel name to state
    await state.update_data(channel_name=channel_name)

    # Move to next state
    await state.set_state(RequiredChannelStates.waiting_for_stars_reward)

    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data="manage_required_channels"
                )
            ]]
        )
    )

@router.message(RequiredChannelStates.waiting_for_stars_reward)
async def process_stars_reward(message: types.Message, state: FSMContext):
    """Process stars reward input"""
    try:
        stars_reward = int(message.text.strip())
        if stars_reward < 0:
            raise ValueError("Negative value")
    except ValueError:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", 
                        callback_data="manage_required_channels"
                    )
                ]]
            )
        )
        return

    # Save stars reward to state
    await state.update_data(stars_reward=stars_reward)

    # Get all data and ask for confirmation
    data = await state.get_data()
    channel_id = data.get('channel_id')
    channel_name = data.get('channel_name')

    await state.set_state(RequiredChannelStates.waiting_for_confirmation)

    await message.reply(
        f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:\n\n"
        f"ID: {channel_id}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel_name}\n"
        f"–ù–∞–≥—Ä–∞–¥–∞: {stars_reward} –∑–≤–µ–∑–¥\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                        callback_data="confirm_add_channel"
                    ),
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", 
                        callback_data="manage_required_channels"
                    )
                ]
            ]
        )
    )

@router.callback_query(F.data == "confirm_add_channel", RequiredChannelStates.waiting_for_confirmation)
async def confirm_add_channel(callback_query: types.CallbackQuery, state: FSMContext):
    """Confirm adding a new required channel"""
    # Get data from state
    data = await state.get_data()
    channel_id = data.get('channel_id')
    channel_name = data.get('channel_name')
    stars_reward = data.get('stars_reward')

    # Add channel to required list
    result = await subgram_api.add_required_channel(channel_id, channel_name, stars_reward)

    if result and result.get('success'):
        await callback_query.message.edit_text(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", 
                        callback_data="manage_required_channels"
                    )
                ]]
            )
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="manage_required_channels"
                    )
                ]]
            )
        )

    # Clear state
    await state.clear()

@router.callback_query(F.data == "remove_required_channel")
async def show_remove_channel_options(callback_query: types.CallbackQuery):
    """Show options to remove a required channel"""
    user_id = callback_query.from_user.id

    # Check if user is admin
    if str(user_id) not in ADMIN_ID.split(','):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # Get list of required channels
    required_channels = await subgram_api.get_required_channels()

    if not required_channels or not isinstance(required_channels, list) or len(required_channels) == 0:
        await callback_query.message.edit_text(
            "‚ùå –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="manage_required_channels"
                    )
                ]]
            )
        )
        return

    # Create keyboard with channel options
    buttons = []
    for channel in required_channels:
        channel_id = channel.get('channel_id')
        channel_name = channel.get('channel_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')

        buttons.append([
            types.InlineKeyboardButton(
                text=f"‚ùå {channel_name}", 
                callback_data=f"remove_channel:{channel_id}"
            )
        ])

    # Add back button
    buttons.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="manage_required_channels"
        )
    ])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("remove_channel:"))
async def remove_channel(callback_query: types.CallbackQuery):
    """Remove a channel from required subscriptions"""
    user_id = callback_query.from_user.id

    # Check if user is admin
    if str(user_id) not in ADMIN_ID.split(','):
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return

    # Get channel ID from callback data
    channel_id = callback_query.data.split(":")[1]

    # Remove channel from required list
    result = await subgram_api.remove_required_channel(channel_id)

    if result and result.get('success'):
        await callback_query.message.edit_text(
            f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", 
                        callback_data="manage_required_channels"
                    )
                ]]
            )
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                        callback_data="manage_required_channels"
                    )
                ]]
            )
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Subgram
@router.callback_query(F.data.startswith("subgram"))
async def subgram_callback_query(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –±–ª–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ Subgram"""
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id

    if callback_query.data == "subgram-op":
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        first_name = callback_query.from_user.first_name
        language_code = callback_query.from_user.language_code
        is_premium = callback_query.from_user.is_premium

        # –ó–∞–ø—Ä–æ—Å –∫ API Subgram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        status, code, message, links = await subgram_api.request_op(
            user_id, 
            chat_id,
            first_name=first_name,
            language_code=language_code,
            is_premium=is_premium
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ñ—Ñ–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
        if links and isinstance(links, list) and len(links) > 0:
            for link_data in links:
                offer_url = link_data.get('url', '')
                channel_name = link_data.get('name', '')
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º 10 –∑–≤–µ–∑–¥ –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
                reward_amount = link_data.get('stars_reward', 10)
                offer_id = str(link_data.get('id', ''))

                if offer_url:
                    try:
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        await log_offer_to_database(
                            user_id=user_id,
                            offer_url=offer_url,
                            offer_id=offer_id,
                            channel_name=channel_name,
                            reward_amount=reward_amount
                        )
                        logger.info(f"Subgram offer logged: User {user_id}, Channel {channel_name}, URL {offer_url}")
                    except Exception as e:
                        logger.error(f"Error logging Subgram offer: {e}")

        if status == 'ok' and code == 200:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_data = db.get_user(user_id)
            reward_stars = 10  # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
            db.update_user_stars(user_id, reward_stars)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_user_data = db.get_user(user_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 'completed'
            if links and isinstance(links, list):
                for link_data in links:
                    offer_url = link_data.get('url', '')
                    if offer_url:
                        try:
                            await update_offer_status(user_id, offer_url, 'completed')
                            logger.info(f"Offer status updated to completed: User {user_id}, URL {offer_url}")
                        except Exception as e:
                            logger.error(f"Error updating offer status: {e}")

            await callback_query.message.edit_text(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward_stars} –∑–≤–µ–∑–¥!\n\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_user_data[4]} –∑–≤–µ–∑–¥",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            callback_data="main_menu"
                        )
                    ]]
                )
            )
        elif status == 'ok':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
            await callback_query.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            callback_data="main_menu"
                        )
                    ]]
                )
            )
        elif status == 'warning' and links:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            text = "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n"

            keyboard = []
            for i, link in enumerate(links, 1):
                text += f"{i}. {link}\n"
                keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"–ö–∞–Ω–∞–ª {i}", 
                        url=link
                    )
                ])

            text += "\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏'."

            keyboard.append([
                types.InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", 
                    callback_data="subgram-op"
                )
            ])

            await callback_query.message.edit_text(
                text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                disable_web_page_preview=True
            )
        elif status == 'gender':
            # –ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            await callback_query.message.edit_text(
                "üìä –î–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(
                                text="‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π", 
                                callback_data="subgram_gender_male"
                            )
                        ],
                        [
                            types.InlineKeyboardButton(
                                text="‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π", 
                                callback_data="subgram_gender_female"
                            )
                        ]
                    ]
                )
            )
        else:
            # –û—à–∏–±–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å
            logger.warning(f"Unexpected Subgram API response: {status}, {code}, {message}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif callback_query.data.startswith("subgram_gender_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        gender = callback_query.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∞ –∏–∑ callback_data

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        first_name = callback_query.from_user.first_name
        language_code = callback_query.from_user.language_code
        is_premium = callback_query.from_user.is_premium

        # –ó–∞–ø—Ä–æ—Å –∫ API Subgram —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª–∞
        status, code, message, links = await subgram_api.request_op(
            user_id, 
            chat_id,
            gender=gender,
            first_name=first_name,
            language_code=language_code,
            is_premium=is_premium
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ñ—Ñ–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
        if links and isinstance(links, list) and len(links) > 0:
            for link_data in links:
                offer_url = link_data.get('url', '')
                channel_name = link_data.get('name', '')
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º 10 –∑–≤–µ–∑–¥ –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
                reward_amount = link_data.get('stars_reward', 10)
                offer_id = str(link_data.get('id', ''))

                if offer_url:
                    try:
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        await log_offer_to_database(
                            user_id=user_id,
                            offer_url=offer_url,
                            offer_id=offer_id,
                            channel_name=channel_name,
                            reward_amount=reward_amount
                        )
                        logger.info(f"Subgram offer logged (gender={gender}): User {user_id}, Channel {channel_name}, URL {offer_url}")
                    except Exception as e:
                        logger.error(f"Error logging Subgram offer (gender={gender}): {e}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ª—É—á–∞—é
        if status == 'ok' and code == 200:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            user_data = db.get_user(user_id)
            reward_stars = 10
            db.update_user_stars(user_id, reward_stars)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_user_data = db.get_user(user_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 'completed'
            if links and isinstance(links, list):
                for link_data in links:
                    offer_url = link_data.get('url', '')
                    if offer_url:
                        try:
                            await update_offer_status(user_id, offer_url, 'completed')
                            logger.info(f"Offer status updated to completed (gender={gender}): User {user_id}, URL {offer_url}")
                        except Exception as e:
                            logger.error(f"Error updating offer status (gender={gender}): {e}")

            await callback_query.message.edit_text(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward_stars} –∑–≤–µ–∑–¥!\n\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {updated_user_data[4]} –∑–≤–µ–∑–¥",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            callback_data="main_menu"
                        )
                    ]]
                )
            )
        elif status == 'ok':
            await callback_query.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            callback_data="main_menu"
                        )
                    ]]
                )
            )
        elif status == 'warning' and links:
            text = "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n"

            keyboard = []
            for i, link in enumerate(links, 1):
                text += f"{i}. {link}\n"
                keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"–ö–∞–Ω–∞–ª {i}", 
                        url=link
                    )
                ])

            text += "\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏'."

            keyboard.append([
                types.InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", 
                    callback_data=f"subgram_gender_{gender}"
                )
            ])

            await callback_query.message.edit_text(
                text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
                disable_web_page_preview=True
            )
        else:
            logger.warning(f"Unexpected Subgram API response: {status}, {code}, {message}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def register_handlers(dp):
    dp.include_router(router)