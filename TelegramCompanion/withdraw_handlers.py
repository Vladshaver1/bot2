import logging
from aiogram import types, Bot, F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from models import WithdrawStates
from database import get_user_stats, get_admin_settings, create_withdrawal_request
from keyboards import get_withdraw_keyboard, get_back_button

logger = logging.getLogger(__name__)

# Register withdraw handlers
def register_handlers(dp: Dispatcher, bot: Bot):
    # Withdraw menu
    dp.callback_query.register(show_withdraw_menu, F.data == "withdraw")
    
    # Process withdraw amounts
    dp.callback_query.register(process_withdraw_amount, F.data.startswith("withdraw_"))
    
    # Custom withdraw amount handling
    dp.message.register(process_custom_withdraw, WithdrawStates.waiting_for_withdraw_amount)
    
    # Payment info handling
    dp.message.register(process_payment_info, WithdrawStates.waiting_for_payment_info)
    
    logger.info("Withdraw handlers registered")

# Show withdraw menu
async def show_withdraw_menu(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # Get user stats and settings
        user_stats = get_user_stats(user_id)
        settings = get_admin_settings()
        
        if not user_stats or not settings:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        stars, completed_tasks, referrals_count = user_stats
        min_referrals, min_tasks, _, _, _ = settings
        
        # Check if user meets the requirements
        if completed_tasks < min_tasks or referrals_count < min_referrals:
            await callback.answer(
                f"‚ö†Ô∏è –î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                f"- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å {min_referrals} –¥—Ä—É–∑–µ–π (—É –≤–∞—Å {referrals_count})\n"
                f"- –í—ã–ø–æ–ª–Ω–∏—Ç—å {min_tasks} –∑–∞–¥–∞–Ω–∏–π (—É –≤–∞—Å {completed_tasks})",
                show_alert=True
            )
            return
        
        withdraw_text = (
            f"üí∏ <b>–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥</b>\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {stars} –∑–≤–µ–∑–¥\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:"
        )
        
        await callback.message.edit_text(
            withdraw_text,
            reply_markup=get_withdraw_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in show_withdraw_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –≤—ã–≤–æ–¥–∞", show_alert=True)

# Process withdraw amount selection
async def process_withdraw_amount(callback: types.CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        
        # Handle custom amount option
        if callback.data == "withdraw_custom":
            await state.set_state(WithdrawStates.waiting_for_withdraw_amount)
            
            buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="withdraw")]]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(
                "üí∏ <b>–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
                reply_markup=keyboard
            )
            await callback.answer()
            return
        
        # Get selected amount
        amount = int(callback.data.split("_")[1])
        
        # Check if user has enough stars
        user_stats = get_user_stats(user_id)
        if not user_stats or user_stats[0] < amount:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞", show_alert=True)
            return
        
        # Save withdrawal amount
        await state.update_data(withdraw_amount=amount)
        await state.set_state(WithdrawStates.waiting_for_payment_info)
        
        buttons = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="withdraw")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            f"üí∏ <b>–í—ã–≤–æ–¥ {amount} –∑–≤–µ–∑–¥</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã):",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in process_withdraw_amount: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞", show_alert=True)

# Process custom withdraw amount
async def process_custom_withdraw(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        
        # Parse amount
        try:
            amount = int(message.text.strip())
            if amount <= 0:
                raise ValueError("Amount must be positive")
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)",
                reply_markup=get_back_button()
            )
            return
        
        # Check if user has enough stars
        user_stats = get_user_stats(user_id)
        if not user_stats or user_stats[0] < amount:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞",
                reply_markup=get_back_button()
            )
            return
        
        # Save withdrawal amount
        await state.update_data(withdraw_amount=amount)
        await state.set_state(WithdrawStates.waiting_for_payment_info)
        
        buttons = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="withdraw")]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(
            f"üí∏ <b>–í—ã–≤–æ–¥ {amount} –∑–≤–µ–∑–¥</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã):",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_custom_withdraw: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞",
            reply_markup=get_back_button()
        )
        await state.clear()

# Process payment information
async def process_payment_info(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        payment_info = message.text.strip()
        
        if not payment_info:
            await message.answer(
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # Get withdraw amount from state
        data = await state.get_data()
        amount = data.get("withdraw_amount", 0)
        
        if amount <= 0:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_back_button()
            )
            await state.clear()
            return
        
        # Create withdrawal request
        success, result_message = create_withdrawal_request(user_id, amount)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"–°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: {payment_info}\n\n"
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_back_button()
            )
        else:
            await message.answer(
                f"‚ùå {result_message}",
                reply_markup=get_back_button()
            )
        
        await state.clear()
    except Exception as e:
        logger.error(f"Error in process_payment_info: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥",
            reply_markup=get_back_button()
        )
        await state.clear()
