import logging
import asyncio
from datetime import datetime
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import Database
from config import ADMIN_ID
from subgram_api import subgram_api

logger = logging.getLogger(__name__)
router = Router()
db = Database()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
def get_admin_panel_buttons():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
    return [
        [
            InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏", callback_data="admin_manage_tasks"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_add_task")
        ],
        [
            InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users"),
            InlineKeyboardButton(text="üí∞ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals")
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω—É–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="admin_reset_stars")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
            InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_mailing")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Subgram", callback_data="admin_stats"),
            InlineKeyboardButton(text="üíπ –ë–∞–ª–∞–Ω—Å Subgram", callback_data="admin_balance")
        ]
    ]

# Admin FSM states
class AdminStates(StatesGroup):
    waiting_for_task_description = State()
    waiting_for_task_reward = State()
    waiting_for_user_search = State()
    waiting_for_stars_change = State()
    waiting_for_mailing_text = State()
    waiting_for_mailing_photo = State()
    waiting_for_mailing_button = State()
    waiting_for_min_referrals = State()
    waiting_for_min_tasks = State()
    waiting_for_partner_bonus = State()
    waiting_for_steal_percent = State()
    waiting_for_steal_unlock_tasks = State()

# Check if user is admin
def is_admin(user_id):
    return user_id == ADMIN_ID

# Admin command handler
@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    buttons = get_admin_panel_buttons()
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)

# Admin callback query handler
@router.callback_query(F.data.startswith("admin_"))
async def process_admin_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if not is_admin(user_id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    action = callback_query.data.split("_")[1]
    
    if action == "add_task":
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
        await state.set_state(AdminStates.waiting_for_task_description)
    
    elif action == "manage_tasks":
        tasks = db.get_active_tasks()
        await show_tasks_management(callback_query.message, tasks)
    
    elif action == "withdrawals":
        withdrawals = db.get_pending_withdrawals()
        await show_pending_withdrawals(callback_query.message, withdrawals)
    
    elif action == "manage_users":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è –ø–æ–∏—Å–∫–∞:", 
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_user_search)
    
    elif action == "mailing":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_mailing_text)
    
    elif action == "settings":
        settings = db.get_admin_settings()
        if settings:
            min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks = settings
            text = (
                f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_referrals}\n"
                f"–ú–∏–Ω–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_tasks}\n"
                f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {partner_bonus} –∑–≤–µ–∑–¥\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥: {steal_percent}%\n"
                f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—Ä–∞–∂–∏ (–∑–∞–¥–∞–Ω–∏–π): {steal_unlock_tasks}\n"
            )
            
            buttons = [
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_set_min_referrals")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_set_min_tasks")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="admin_set_partner_bonus")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_percent")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_unlock")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback_query.message.edit_text(text, reply_markup=keyboard)
            
    elif action == "stats":
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –¥–ª—è Subgram –∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from subgram_api import subgram_api
        status, code, message, data, summary = await subgram_api.get_statistics(period=30)
        
        if status == "ok" and data:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            header = (
                f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Subgram –∑–∞ {summary['days_analyzed']} –¥–Ω–µ–π</b>\n\n"
                f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary['total_count']}\n"
                f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_amount']:.2f} ‚ÇΩ\n\n"
                f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n"
                f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary['week_count']}\n"
                f"‚Ä¢ –°—É–º–º–∞: {summary['week_amount']:.2f} ‚ÇΩ\n\n"
                f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:</b>\n"
                f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary['day_count']}\n"
                f"‚Ä¢ –°—É–º–º–∞: {summary['day_amount']:.2f} ‚ÇΩ\n\n"
                f"<b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å: {summary['avg_count']:.2f}\n"
                f"‚Ä¢ –°—É–º–º–∞ –≤ –¥–µ–Ω—å: {summary['avg_amount']:.2f} ‚ÇΩ\n\n"
                f"<b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):</b>\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            details = ""
            for i, entry in enumerate(data[:7]):
                date = entry.get("date", "–ù/–î")
                count = entry.get("count", 0)
                amount = entry.get("amount", 0)
                details += f"‚Ä¢ {date}: {count} —Ç—Ä–∞–Ω–∑., {amount:.2f} ‚ÇΩ\n"
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            text = header + details
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
            
            await callback_query.message.edit_text(text, reply_markup=keyboard)
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_text = f"<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n{message} (–∫–æ–¥: {code})"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
            
            await callback_query.message.edit_text(error_text, reply_markup=keyboard)
    
    elif action == "balance":
        await callback_query.message.edit_text(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Subgram...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å Subgram
        from subgram_api import subgram_api
        status, code, message, balance = await subgram_api.get_balance()
        
        if status == "ok":
            balance_text = (
                f"<b>üíπ –ë–∞–ª–∞–Ω—Å Subgram</b>\n\n"
                f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>\n\n"
                f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</i>"
            )
            
            await callback_query.message.edit_text(
                balance_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_balance")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]),
                parse_mode="HTML"
            )
        else:
            await callback_query.message.edit_text(
                f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ Subgram</b>\n\n"
                f"–ö–æ–¥: {code}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="admin_balance")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ]),
                parse_mode="HTML"
            )
    
    elif action == "back":
        buttons = get_admin_panel_buttons()
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback_query.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    
    # Settings handlers
    elif action == "set_min_referrals":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_min_referrals)
    
    elif action == "set_min_tasks":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_min_tasks)
    
    elif action == "set_partner_bonus":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–≤ –∑–≤–µ–∑–¥–∞—Ö):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_partner_bonus)
    
    elif action == "set_steal_percent":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_steal_percent)
    
    elif action == "set_steal_unlock":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∞–∂–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_steal_unlock_tasks)
        
    elif action == "reset_stars":
        # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω—É–ª–µ–Ω–∏–µ–º –∑–≤–µ–∑–¥ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å", callback_data="confirm_reset_stars"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]
        ])
        await callback_query.message.edit_text(
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> ‚ö†Ô∏è\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

# Task management
async def show_tasks_management(message, tasks):
    if tasks:
        text = "<b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:</b>\n\n"
        buttons = []
        
        for task in tasks:
            task_id, description, reward = task
            text += f"ID: {task_id} - {description} ({reward} –∑–≤–µ–∑–¥)\n"
            buttons.append([InlineKeyboardButton(
                text=f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ {task_id}", 
                callback_data=f"toggle_task_{task_id}"
            )])
        
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.edit_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

# Toggle task status
@router.callback_query(F.data.startswith("toggle_task_"))
async def toggle_task(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if not is_admin(user_id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    task_id = int(callback_query.data.split("_")[2])
    
    if db.toggle_task_status(task_id):
        await callback_query.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è {task_id} –∏–∑–º–µ–Ω–µ–Ω")
        tasks = db.get_active_tasks()
        await show_tasks_management(callback_query.message, tasks)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è")

# Show pending withdrawals
async def show_pending_withdrawals(message, withdrawals):
    if withdrawals:
        text = "<b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</b>\n\n"
        buttons = []
        
        for withdrawal in withdrawals:
            withdrawal_id, user_id, username, amount, request_date = withdrawal
            text += (f"ID: {withdrawal_id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username or user_id} | "
                    f"–°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥ | –î–∞—Ç–∞: {request_date}\n\n")
            
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #{withdrawal_id}", 
                    callback_data=f"approve_withdrawal_{withdrawal_id}"
                ),
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{withdrawal_id}", 
                    callback_data=f"reject_withdrawal_{withdrawal_id}"
                )
            ])
        
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.edit_text(
            "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

# Process withdrawal
@router.callback_query(F.data.startswith(("approve_withdrawal_", "reject_withdrawal_")))
async def process_withdrawal(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if not is_admin(user_id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    action, withdrawal_id = callback_query.data.split("_")[0], int(callback_query.data.split("_")[2])
    status = "approved" if action == "approve" else "rejected"
    
    if db.process_withdrawal(withdrawal_id, status):
        await callback_query.answer(f"–ó–∞–ø—Ä–æ—Å #{withdrawal_id} {status}")
        withdrawals = db.get_pending_withdrawals()
        await show_pending_withdrawals(callback_query.message, withdrawals)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# Add task - step 1
@router.message(AdminStates.waiting_for_task_description)
async def process_task_description(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    description = message.text.strip()
    if not description:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.")
        return
    
    await state.update_data(task_description=description)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )
    await state.set_state(AdminStates.waiting_for_task_reward)

# Add task - step 2
@router.message(AdminStates.waiting_for_task_reward)
async def process_task_reward(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        reward = int(message.text.strip())
        if reward <= 0:
            raise ValueError("Reward must be positive")
        
        data = await state.get_data()
        description = data.get("task_description")
        
        task_id = db.add_task(description, reward)
        if task_id:
            await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\nID: {task_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ù–∞–≥—Ä–∞–¥–∞: {reward} –∑–≤–µ–∑–¥")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
        
        await state.clear()
        
        # Show admin panel
        buttons = get_admin_panel_buttons()
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).")

# User search
@router.message(AdminStates.waiting_for_user_search)
async def process_user_search(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    search_query = message.text.strip()
    
    try:
        # Try to parse as user_id
        user_id = int(search_query) if search_query.isdigit() else None
        
        # If not a user_id, check if it's a username
        if not user_id and search_query.startswith('@'):
            username = search_query[1:]  # Remove the @ symbol
            # Here we would search by username in the database
            # For now, just show an error
            await message.answer(
                f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ])
            )
            return
        
        if not user_id:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ])
            )
            return
        
        # Get user from database
        user = db.get_user(user_id)
        
        if not user:
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ])
            )
            return
        
        # Display user info
        user_id, username, full_name, referral_id, stars, completed_tasks, referrals_count, last_activity, is_banned, reg_date = user[:10]
        
        ban_status = "–ó–∞–±–∞–Ω–µ–Ω" if is_banned else "–ê–∫—Ç–∏–≤–µ–Ω"
        
        user_info = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"ID: {user_id}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\n"
            f"–°—Ç–∞—Ç—É—Å: {ban_status}\n"
            f"–ó–≤–µ–∑–¥—ã: {stars}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
            f"–ü—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—É: {referral_id or '–ù–µ—Ç'}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
        )
        
        buttons = [
            [
                InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data=f"edit_stars_{user_id}"),
                InlineKeyboardButton(
                    text="–†–∞–∑–±–∞–Ω–∏—Ç—å" if is_banned else "–ó–∞–±–∞–Ω–∏—Ç—å", 
                    callback_data=f"toggle_ban_{user_id}"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user_{user_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(user_info, reply_markup=keyboard)
        await state.clear()
    
    except Exception as e:
        logger.error(f"Error in process_user_search: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

# Edit user stars
@router.callback_query(F.data.startswith("edit_stars_"))
async def edit_stars(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    user_id = int(callback_query.data.split("_")[2])
    
    await state.update_data(edit_user_id=user_id)
    await callback_query.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '+' –∏–ª–∏ '-' –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: +10 –∏–ª–∏ -5",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )
    await state.set_state(AdminStates.waiting_for_stars_change)

# Process stars change
@router.message(AdminStates.waiting_for_stars_change)
async def process_stars_change(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        stars_change = message.text.strip()
        if not (stars_change.startswith('+') or stars_change.startswith('-')):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '+' –∏–ª–∏ '-' –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º")
            return
        
        stars_change = int(stars_change)
        
        data = await state.get_data()
        user_id = data.get("edit_user_id")
        
        if db.update_user_stars(user_id, stars_change):
            await message.answer(f"‚úÖ –ó–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {stars_change}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await state.clear()
        
        # Show admin panel
        buttons = get_admin_panel_buttons()
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# Toggle user ban status
@router.callback_query(F.data.startswith("toggle_ban_"))
async def toggle_ban(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[2])
    
    # Get current ban status
    user = db.get_user(user_id)
    if not user:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    is_banned = user[8]
    new_status = 0 if is_banned else 1
    
    if db.ban_user(user_id, new_status):
        status_text = "–∑–∞–±–∞–Ω–µ–Ω" if new_status else "—Ä–∞–∑–±–∞–Ω–µ–Ω"
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {status_text}")
        
        # Update message with new ban status
        user = db.get_user(user_id)
        user_id, username, full_name, referral_id, stars, completed_tasks, referrals_count, last_activity, is_banned, reg_date = user[:10]
        
        ban_status = "–ó–∞–±–∞–Ω–µ–Ω" if is_banned else "–ê–∫—Ç–∏–≤–µ–Ω"
        
        user_info = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
            f"ID: {user_id}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\n"
            f"–°—Ç–∞—Ç—É—Å: {ban_status}\n"
            f"–ó–≤–µ–∑–¥—ã: {stars}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n"
            f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
            f"–ü—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—É: {referral_id or '–ù–µ—Ç'}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
        )
        
        buttons = [
            [
                InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data=f"edit_stars_{user_id}"),
                InlineKeyboardButton(
                    text="–†–∞–∑–±–∞–Ω–∏—Ç—å" if is_banned else "–ó–∞–±–∞–Ω–∏—Ç—å", 
                    callback_data=f"toggle_ban_{user_id}"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user_{user_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback_query.message.edit_text(user_info, reply_markup=keyboard)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# Handle user deletion
@router.callback_query(F.data.startswith("delete_user_"))
async def delete_user(callback_query: types.CallbackQuery):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = int(callback_query.data.split("_")[2])
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{user_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{user_id}")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text(
        f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> ‚ö†Ô∏è\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è:\n"
        f"- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è\n"
        f"- –ò—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞–Ω–∏–π\n"
        f"- –ò—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤\n"
        f"- –ò–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        f"- –ò—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫\n"
        f"- –ò—Å—Ç–æ—Ä–∏—é –æ–±–º–µ–Ω–æ–≤\n\n"
        f"–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# Confirm user deletion
@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_user(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback_query.data.split("_")[2])
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if db.delete_user(user_id):
        await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        await callback_query.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await callback_query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"delete_user_{user_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

# Cancel user deletion
@router.callback_query(F.data.startswith("cancel_delete_"))
async def cancel_delete_user(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback_query.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —ç–∫—Ä–∞–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    user = db.get_user(user_id)
    if not user:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        buttons = get_admin_panel_buttons()
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback_query.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
        return
    
    user_id, username, full_name, referral_id, stars, completed_tasks, referrals_count, last_activity, is_banned, reg_date = user[:10]
    
    ban_status = "–ó–∞–±–∞–Ω–µ–Ω" if is_banned else "–ê–∫—Ç–∏–≤–µ–Ω"
    
    user_info = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
        f"ID: {user_id}\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\n"
        f"–°—Ç–∞—Ç—É—Å: {ban_status}\n"
        f"–ó–≤–µ–∑–¥—ã: {stars}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
        f"–ü—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—É: {referral_id or '–ù–µ—Ç'}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
    )
    
    buttons = [
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data=f"edit_stars_{user_id}"),
            InlineKeyboardButton(
                text="–†–∞–∑–±–∞–Ω–∏—Ç—å" if is_banned else "–ó–∞–±–∞–Ω–∏—Ç—å", 
                callback_data=f"toggle_ban_{user_id}"
            )
        ],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user_{user_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text(user_info, reply_markup=keyboard)

# Mailing step 1 - get text
@router.message(AdminStates.waiting_for_mailing_text)
async def process_mailing_text(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    mailing_text = message.text.strip()
    if not mailing_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    await state.update_data(mailing_text=mailing_text)
    
    # Ask if admin wants to add a photo
    buttons = [
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="mailing_add_photo"),
            InlineKeyboardButton(text="–ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="mailing_no_photo")
        ],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?", reply_markup=keyboard)

# Mailing - add photo decision
@router.callback_query(F.data.startswith("mailing_"))
async def mailing_photo_decision(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    action = callback_query.data.split("_")[1]
    
    if action == "add_photo":
        await callback_query.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_mailing_photo)
    
    elif action == "no_photo":
        # Ask if admin wants to add a button
        buttons = [
            [
                InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="mailing_add_button"),
                InlineKeyboardButton(text="–ë–µ–∑ –∫–Ω–æ–ø–∫–∏", callback_data="mailing_no_button")
            ],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback_query.message.edit_text("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?", reply_markup=keyboard)
    
    elif action == "add_button":
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞—à –∫–∞–Ω–∞–ª https://t.me/channel'",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
            ])
        )
        await state.set_state(AdminStates.waiting_for_mailing_button)
    
    elif action == "no_button":
        # Start the mailing
        data = await state.get_data()
        mailing_text = data.get("mailing_text")
        
        await callback_query.message.edit_text("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        # Get all users
        await start_mailing(callback_query.message, mailing_text)
        await state.clear()

# Mailing - get photo
@router.message(AdminStates.waiting_for_mailing_photo)
async def process_mailing_photo(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    photo_id = message.photo[-1].file_id
    await state.update_data(mailing_photo=photo_id)
    
    # Ask if admin wants to add a button
    buttons = [
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="mailing_add_button"),
            InlineKeyboardButton(text="–ë–µ–∑ –∫–Ω–æ–ø–∫–∏", callback_data="mailing_no_button")
        ],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?", reply_markup=keyboard)

# Mailing - get button
@router.message(AdminStates.waiting_for_mailing_button)
async def process_mailing_button(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        button_text_url = message.text.strip()
        if ' ' not in button_text_url:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        
        button_text, button_url = button_text_url.split(' ', 1)
        
        if not button_text or not button_url:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL.")
            return
        
        await state.update_data(mailing_button_text=button_text, mailing_button_url=button_url)
        
        data = await state.get_data()
        mailing_text = data.get("mailing_text")
        mailing_photo = data.get("mailing_photo")
        
        # Preview the mailing
        if mailing_photo:
            buttons = [
                [InlineKeyboardButton(text=button_text, url=button_url)]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer_photo(
                photo=mailing_photo,
                caption=mailing_text,
                reply_markup=keyboard
            )
        else:
            buttons = [
                [InlineKeyboardButton(text=button_text, url=button_url)]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(mailing_text, reply_markup=keyboard)
        
        # Confirm mailing
        confirm_buttons = [
            [
                InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_mailing"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]
        ]
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=confirm_buttons)
        
        await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:", reply_markup=confirm_keyboard)
    
    except Exception as e:
        logger.error(f"Error in process_mailing_button: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")

# Confirm and start mailing
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥
@router.callback_query(F.data == "confirm_reset_stars")
async def confirm_reset_stars(callback_query: types.CallbackQuery):
    """–û–±–Ω—É–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = callback_query.from_user.id
    if not is_admin(user_id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –û–±–Ω—É–ª—è–µ–º –∑–≤–µ–∑–¥—ã —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    success, message = db.reset_all_users_stars()
    
    if success:
        await callback_query.answer("–ó–≤–µ–∑–¥—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω—É–ª–µ–Ω—ã")
        await callback_query.message.edit_text(
            "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n" + message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n" + message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="admin_reset_stars")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.callback_query(F.data == "confirm_mailing")
async def confirm_mailing(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    data = await state.get_data()
    mailing_text = data.get("mailing_text")
    mailing_photo = data.get("mailing_photo")
    mailing_button_text = data.get("mailing_button_text")
    mailing_button_url = data.get("mailing_button_url")
    
    await callback_query.message.edit_text("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # Start mailing
    if mailing_button_text and mailing_button_url:
        buttons = [
            [InlineKeyboardButton(text=mailing_button_text, url=mailing_button_url)]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    else:
        keyboard = None
    
    await start_mailing(callback_query.message, mailing_text, mailing_photo, keyboard)
    await state.clear()

# Start mailing to all users
async def start_mailing(message, text, photo_id=None, keyboard=None):
    try:
        # Get all users
        cursor = db.conn.cursor()
        cursor.execute('SELECT user_id FROM users WHERE is_banned = 0')
        users = cursor.fetchall()
        
        sent = 0
        failed = 0
        
        for user in users:
            user_id = user[0]
            try:
                if photo_id:
                    await message.bot.send_photo(user_id, photo=photo_id, caption=text, reply_markup=keyboard)
                else:
                    await message.bot.send_message(user_id, text, reply_markup=keyboard)
                sent += 1
                # Add delay to avoid flooding
                await asyncio.sleep(0.05)
            except Exception as e:
                logger.error(f"Error sending message to user {user_id}: {e}")
                failed += 1
        
        await message.edit_text(
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    
    except Exception as e:
        logger.error(f"Error in start_mailing: {e}")
        await message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

# Admin settings handlers
@router.message(AdminStates.waiting_for_min_referrals)
async def process_min_referrals(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        min_referrals = int(message.text.strip())
        if min_referrals < 0:
            raise ValueError("Min referrals must be non-negative")
        
        if db.update_admin_settings(min_referrals=min_referrals):
            await message.answer(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {min_referrals}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
        
        # Show updated settings
        settings = db.get_admin_settings()
        if settings:
            min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks = settings
            text = (
                f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_referrals}\n"
                f"–ú–∏–Ω–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_tasks}\n"
                f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {partner_bonus} –∑–≤–µ–∑–¥\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥: {steal_percent}%\n"
                f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—Ä–∞–∂–∏ (–∑–∞–¥–∞–Ω–∏–π): {steal_unlock_tasks}\n"
            )
            
            buttons = [
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_set_min_referrals")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_set_min_tasks")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="admin_set_partner_bonus")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_percent")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_unlock")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(text, reply_markup=keyboard)
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.waiting_for_min_tasks)
async def process_min_tasks(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        min_tasks = int(message.text.strip())
        if min_tasks < 0:
            raise ValueError("Min tasks must be non-negative")
        
        if db.update_admin_settings(min_tasks=min_tasks):
            await message.answer(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {min_tasks}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
        
        # Show updated settings
        settings = db.get_admin_settings()
        if settings:
            min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks = settings
            text = (
                f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_referrals}\n"
                f"–ú–∏–Ω–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_tasks}\n"
                f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {partner_bonus} –∑–≤–µ–∑–¥\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥: {steal_percent}%\n"
                f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—Ä–∞–∂–∏ (–∑–∞–¥–∞–Ω–∏–π): {steal_unlock_tasks}\n"
            )
            
            buttons = [
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_set_min_referrals")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_set_min_tasks")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="admin_set_partner_bonus")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_percent")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_unlock")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(text, reply_markup=keyboard)
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.waiting_for_partner_bonus)
async def process_partner_bonus(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        partner_bonus = int(message.text.strip())
        if partner_bonus < 0:
            raise ValueError("Partner bonus must be non-negative")
        
        if db.update_admin_settings(partner_bonus=partner_bonus):
            await message.answer(f"‚úÖ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {partner_bonus}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
        
        # Show updated settings
        settings = db.get_admin_settings()
        if settings:
            min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks = settings
            text = (
                f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_referrals}\n"
                f"–ú–∏–Ω–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_tasks}\n"
                f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {partner_bonus} –∑–≤–µ–∑–¥\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥: {steal_percent}%\n"
                f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—Ä–∞–∂–∏ (–∑–∞–¥–∞–Ω–∏–π): {steal_unlock_tasks}\n"
            )
            
            buttons = [
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_set_min_referrals")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_set_min_tasks")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="admin_set_partner_bonus")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_percent")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_unlock")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(text, reply_markup=keyboard)
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.waiting_for_steal_percent)
async def process_steal_percent(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        steal_percent = int(message.text.strip())
        if steal_percent < 0 or steal_percent > 100:
            raise ValueError("Steal percent must be between 0 and 100")
        
        if db.update_admin_settings(steal_percent=steal_percent):
            await message.answer(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {steal_percent}%")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
        
        # Show updated settings
        settings = db.get_admin_settings()
        if settings:
            min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks = settings
            text = (
                f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_referrals}\n"
                f"–ú–∏–Ω–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_tasks}\n"
                f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {partner_bonus} –∑–≤–µ–∑–¥\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥: {steal_percent}%\n"
                f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—Ä–∞–∂–∏ (–∑–∞–¥–∞–Ω–∏–π): {steal_unlock_tasks}\n"
            )
            
            buttons = [
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_set_min_referrals")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_set_min_tasks")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="admin_set_partner_bonus")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_percent")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_unlock")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(text, reply_markup=keyboard)
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")

@router.message(AdminStates.waiting_for_steal_unlock_tasks)
async def process_steal_unlock_tasks(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    try:
        steal_unlock_tasks = int(message.text.strip())
        if steal_unlock_tasks < 0:
            raise ValueError("Steal unlock tasks must be non-negative")
        
        if db.update_admin_settings(steal_unlock_tasks=steal_unlock_tasks):
            await message.answer(f"‚úÖ –ü–æ—Ä–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∞–∂–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {steal_unlock_tasks} –∑–∞–¥–∞–Ω–∏–π")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
        
        # Show updated settings
        settings = db.get_admin_settings()
        if settings:
            min_referrals, min_tasks, partner_bonus, steal_percent, steal_unlock_tasks = settings
            text = (
                f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"–ú–∏–Ω–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_referrals}\n"
                f"–ú–∏–Ω–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞: {min_tasks}\n"
                f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {partner_bonus} –∑–≤–µ–∑–¥\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏ –∑–≤–µ–∑–¥: {steal_percent}%\n"
                f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—Ä–∞–∂–∏ (–∑–∞–¥–∞–Ω–∏–π): {steal_unlock_tasks}\n"
            )
            
            buttons = [
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="admin_set_min_referrals")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. –∑–∞–¥–∞–Ω–∏–π", callback_data="admin_set_min_tasks")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="admin_set_partner_bonus")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_percent")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫—Ä–∞–∂–∏", callback_data="admin_set_steal_unlock")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(text, reply_markup=keyboard)
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
